(()=>{"use strict";var __webpack_modules__={727:()=>{eval('\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selector.js\nfunction none() {}\r\n\r\n/* harmony default export */ function selector(selector) {\r\n  return selector == null ? none : function() {\r\n    return this.querySelector(selector);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/select.js\n\r\n\r\n\r\n/* harmony default export */ function selection_select(select) {\r\n  if (typeof select !== "function") select = selector(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n        if ("__data__" in node) subnode.__data__ = node.__data__;\r\n        subgroup[i] = subnode;\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, this._parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/array.js\n// Given something array like (or null), returns something that is strictly an\r\n// array. This is used to ensure that array-like objects passed to d3.selectAll\r\n// or selection.selectAll are converted into proper arrays when creating a\r\n// selection; we don’t ever want to create a selection backed by a live\r\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\r\n// static NodeList as a group, since it safely derived from querySelectorAll.\r\nfunction array(x) {\r\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectorAll.js\nfunction empty() {\r\n  return [];\r\n}\r\n\r\n/* harmony default export */ function selectorAll(selector) {\r\n  return selector == null ? empty : function() {\r\n    return this.querySelectorAll(selector);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectAll.js\n\r\n\r\n\r\n\r\nfunction arrayAll(select) {\r\n  return function() {\r\n    return array(select.apply(this, arguments));\r\n  };\r\n}\r\n\r\n/* harmony default export */ function selectAll(select) {\r\n  if (typeof select === "function") select = arrayAll(select);\r\n  else select = selectorAll(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        subgroups.push(select.call(node, node.__data__, i, group));\r\n        parents.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/matcher.js\n/* harmony default export */ function matcher(selector) {\r\n  return function() {\r\n    return this.matches(selector);\r\n  };\r\n}\r\n\r\nfunction childMatcher(selector) {\r\n  return function(node) {\r\n    return node.matches(selector);\r\n  };\r\n}\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectChild.js\n\r\n\r\nvar find = Array.prototype.find;\r\n\r\nfunction childFind(match) {\r\n  return function() {\r\n    return find.call(this.children, match);\r\n  };\r\n}\r\n\r\nfunction childFirst() {\r\n  return this.firstElementChild;\r\n}\r\n\r\n/* harmony default export */ function selectChild(match) {\r\n  return this.select(match == null ? childFirst\r\n      : childFind(typeof match === "function" ? match : childMatcher(match)));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectChildren.js\n\r\n\r\nvar filter = Array.prototype.filter;\r\n\r\nfunction children() {\r\n  return Array.from(this.children);\r\n}\r\n\r\nfunction childrenFilter(match) {\r\n  return function() {\r\n    return filter.call(this.children, match);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function selectChildren(match) {\r\n  return this.selectAll(match == null ? children\r\n      : childrenFilter(typeof match === "function" ? match : childMatcher(match)));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/filter.js\n\r\n\r\n\r\n/* harmony default export */ function selection_filter(match) {\r\n  if (typeof match !== "function") match = matcher(match);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n        subgroup.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, this._parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sparse.js\n/* harmony default export */ function sparse(update) {\r\n  return new Array(update.length);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/enter.js\n\r\n\r\n\r\n/* harmony default export */ function enter() {\r\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\r\n}\r\n\r\nfunction EnterNode(parent, datum) {\r\n  this.ownerDocument = parent.ownerDocument;\r\n  this.namespaceURI = parent.namespaceURI;\r\n  this._next = null;\r\n  this._parent = parent;\r\n  this.__data__ = datum;\r\n}\r\n\r\nEnterNode.prototype = {\r\n  constructor: EnterNode,\r\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\r\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\r\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\r\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\r\n};\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/constant.js\n/* harmony default export */ function src_constant(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/data.js\n\r\n\r\n\r\n\r\nfunction bindIndex(parent, group, enter, update, exit, data) {\r\n  var i = 0,\r\n      node,\r\n      groupLength = group.length,\r\n      dataLength = data.length;\r\n\r\n  // Put any non-null nodes that fit into update.\r\n  // Put any null nodes into enter.\r\n  // Put any remaining data into enter.\r\n  for (; i < dataLength; ++i) {\r\n    if (node = group[i]) {\r\n      node.__data__ = data[i];\r\n      update[i] = node;\r\n    } else {\r\n      enter[i] = new EnterNode(parent, data[i]);\r\n    }\r\n  }\r\n\r\n  // Put any non-null nodes that don’t fit into exit.\r\n  for (; i < groupLength; ++i) {\r\n    if (node = group[i]) {\r\n      exit[i] = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction bindKey(parent, group, enter, update, exit, data, key) {\r\n  var i,\r\n      node,\r\n      nodeByKeyValue = new Map,\r\n      groupLength = group.length,\r\n      dataLength = data.length,\r\n      keyValues = new Array(groupLength),\r\n      keyValue;\r\n\r\n  // Compute the key for each node.\r\n  // If multiple nodes have the same key, the duplicates are added to exit.\r\n  for (i = 0; i < groupLength; ++i) {\r\n    if (node = group[i]) {\r\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";\r\n      if (nodeByKeyValue.has(keyValue)) {\r\n        exit[i] = node;\r\n      } else {\r\n        nodeByKeyValue.set(keyValue, node);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Compute the key for each datum.\r\n  // If there a node associated with this key, join and add it to update.\r\n  // If there is not (or the key is a duplicate), add it to enter.\r\n  for (i = 0; i < dataLength; ++i) {\r\n    keyValue = key.call(parent, data[i], i, data) + "";\r\n    if (node = nodeByKeyValue.get(keyValue)) {\r\n      update[i] = node;\r\n      node.__data__ = data[i];\r\n      nodeByKeyValue.delete(keyValue);\r\n    } else {\r\n      enter[i] = new EnterNode(parent, data[i]);\r\n    }\r\n  }\r\n\r\n  // Add any remaining nodes that were not bound to data to exit.\r\n  for (i = 0; i < groupLength; ++i) {\r\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\r\n      exit[i] = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction datum(node) {\r\n  return node.__data__;\r\n}\r\n\r\n/* harmony default export */ function data(value, key) {\r\n  if (!arguments.length) return Array.from(this, datum);\r\n\r\n  var bind = key ? bindKey : bindIndex,\r\n      parents = this._parents,\r\n      groups = this._groups;\r\n\r\n  if (typeof value !== "function") value = src_constant(value);\r\n\r\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\r\n    var parent = parents[j],\r\n        group = groups[j],\r\n        groupLength = group.length,\r\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\r\n        dataLength = data.length,\r\n        enterGroup = enter[j] = new Array(dataLength),\r\n        updateGroup = update[j] = new Array(dataLength),\r\n        exitGroup = exit[j] = new Array(groupLength);\r\n\r\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\r\n\r\n    // Now connect the enter nodes to their following update node, such that\r\n    // appendChild can insert the materialized enter node before this node,\r\n    // rather than at the end of the parent node.\r\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\r\n      if (previous = enterGroup[i0]) {\r\n        if (i0 >= i1) i1 = i0 + 1;\r\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\r\n        previous._next = next || null;\r\n      }\r\n    }\r\n  }\r\n\r\n  update = new Selection(update, parents);\r\n  update._enter = enter;\r\n  update._exit = exit;\r\n  return update;\r\n}\r\n\r\n// Given some data, this returns an array-like view of it: an object that\r\n// exposes a length property and allows numeric indexing. Note that unlike\r\n// selectAll, this isn’t worried about “live” collections because the resulting\r\n// array will only be used briefly while data is being bound. (It is possible to\r\n// cause the data to change while iterating by using a key function, but please\r\n// don’t; we’d rather avoid a gratuitous copy.)\r\nfunction arraylike(data) {\r\n  return typeof data === "object" && "length" in data\r\n    ? data // Array, TypedArray, NodeList, array-like\r\n    : Array.from(data); // Map, Set, iterable, string, or anything else\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/exit.js\n\r\n\r\n\r\n/* harmony default export */ function exit() {\r\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/join.js\n/* harmony default export */ function join(onenter, onupdate, onexit) {\r\n  var enter = this.enter(), update = this, exit = this.exit();\r\n  if (typeof onenter === "function") {\r\n    enter = onenter(enter);\r\n    if (enter) enter = enter.selection();\r\n  } else {\r\n    enter = enter.append(onenter + "");\r\n  }\r\n  if (onupdate != null) {\r\n    update = onupdate(update);\r\n    if (update) update = update.selection();\r\n  }\r\n  if (onexit == null) exit.remove(); else onexit(exit);\r\n  return enter && update ? enter.merge(update).order() : update;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/merge.js\n\r\n\r\n/* harmony default export */ function merge(context) {\r\n  var selection = context.selection ? context.selection() : context;\r\n\r\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group0[i] || group1[i]) {\r\n        merge[i] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (; j < m0; ++j) {\r\n    merges[j] = groups0[j];\r\n  }\r\n\r\n  return new Selection(merges, this._parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/order.js\n/* harmony default export */ function order() {\r\n\r\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\r\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\r\n      if (node = group[i]) {\r\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\r\n        next = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sort.js\n\r\n\r\n/* harmony default export */ function sort(compare) {\r\n  if (!compare) compare = ascending;\r\n\r\n  function compareNode(a, b) {\r\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\r\n  }\r\n\r\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        sortgroup[i] = node;\r\n      }\r\n    }\r\n    sortgroup.sort(compareNode);\r\n  }\r\n\r\n  return new Selection(sortgroups, this._parents).order();\r\n}\r\n\r\nfunction ascending(a, b) {\r\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/call.js\n/* harmony default export */ function call() {\r\n  var callback = arguments[0];\r\n  arguments[0] = this;\r\n  callback.apply(null, arguments);\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/nodes.js\n/* harmony default export */ function nodes() {\r\n  return Array.from(this);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/node.js\n/* harmony default export */ function node() {\r\n\r\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\r\n      var node = group[i];\r\n      if (node) return node;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/size.js\n/* harmony default export */ function size() {\r\n  let size = 0;\r\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\r\n  return size;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/empty.js\n/* harmony default export */ function selection_empty() {\r\n  return !this.node();\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/each.js\n/* harmony default export */ function each(callback) {\r\n\r\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\r\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespaces.js\nvar xhtml = "http://www.w3.org/1999/xhtml";\r\n\r\n/* harmony default export */ const namespaces = ({\r\n  svg: "http://www.w3.org/2000/svg",\r\n  xhtml: xhtml,\r\n  xlink: "http://www.w3.org/1999/xlink",\r\n  xml: "http://www.w3.org/XML/1998/namespace",\r\n  xmlns: "http://www.w3.org/2000/xmlns/"\r\n});\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespace.js\n\r\n\r\n/* harmony default export */ function namespace(name) {\r\n  var prefix = name += "", i = prefix.indexOf(":");\r\n  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);\r\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/attr.js\n\r\n\r\nfunction attrRemove(name) {\r\n  return function() {\r\n    this.removeAttribute(name);\r\n  };\r\n}\r\n\r\nfunction attrRemoveNS(fullname) {\r\n  return function() {\r\n    this.removeAttributeNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\nfunction attrConstant(name, value) {\r\n  return function() {\r\n    this.setAttribute(name, value);\r\n  };\r\n}\r\n\r\nfunction attrConstantNS(fullname, value) {\r\n  return function() {\r\n    this.setAttributeNS(fullname.space, fullname.local, value);\r\n  };\r\n}\r\n\r\nfunction attrFunction(name, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.removeAttribute(name);\r\n    else this.setAttribute(name, v);\r\n  };\r\n}\r\n\r\nfunction attrFunctionNS(fullname, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\r\n    else this.setAttributeNS(fullname.space, fullname.local, v);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function attr(name, value) {\r\n  var fullname = namespace(name);\r\n\r\n  if (arguments.length < 2) {\r\n    var node = this.node();\r\n    return fullname.local\r\n        ? node.getAttributeNS(fullname.space, fullname.local)\r\n        : node.getAttribute(fullname);\r\n  }\r\n\r\n  return this.each((value == null\r\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"\r\n      ? (fullname.local ? attrFunctionNS : attrFunction)\r\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/window.js\n/* harmony default export */ function src_window(node) {\r\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\r\n      || (node.document && node) // node is a Window\r\n      || node.defaultView; // node is a Document\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/style.js\n\r\n\r\nfunction styleRemove(name) {\r\n  return function() {\r\n    this.style.removeProperty(name);\r\n  };\r\n}\r\n\r\nfunction styleConstant(name, value, priority) {\r\n  return function() {\r\n    this.style.setProperty(name, value, priority);\r\n  };\r\n}\r\n\r\nfunction styleFunction(name, value, priority) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.style.removeProperty(name);\r\n    else this.style.setProperty(name, v, priority);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function style(name, value, priority) {\r\n  return arguments.length > 1\r\n      ? this.each((value == null\r\n            ? styleRemove : typeof value === "function"\r\n            ? styleFunction\r\n            : styleConstant)(name, value, priority == null ? "" : priority))\r\n      : styleValue(this.node(), name);\r\n}\r\n\r\nfunction styleValue(node, name) {\r\n  return node.style.getPropertyValue(name)\r\n      || src_window(node).getComputedStyle(node, null).getPropertyValue(name);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/property.js\nfunction propertyRemove(name) {\r\n  return function() {\r\n    delete this[name];\r\n  };\r\n}\r\n\r\nfunction propertyConstant(name, value) {\r\n  return function() {\r\n    this[name] = value;\r\n  };\r\n}\r\n\r\nfunction propertyFunction(name, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) delete this[name];\r\n    else this[name] = v;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function property(name, value) {\r\n  return arguments.length > 1\r\n      ? this.each((value == null\r\n          ? propertyRemove : typeof value === "function"\r\n          ? propertyFunction\r\n          : propertyConstant)(name, value))\r\n      : this.node()[name];\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/classed.js\nfunction classArray(string) {\r\n  return string.trim().split(/^|\\s+/);\r\n}\r\n\r\nfunction classList(node) {\r\n  return node.classList || new ClassList(node);\r\n}\r\n\r\nfunction ClassList(node) {\r\n  this._node = node;\r\n  this._names = classArray(node.getAttribute("class") || "");\r\n}\r\n\r\nClassList.prototype = {\r\n  add: function(name) {\r\n    var i = this._names.indexOf(name);\r\n    if (i < 0) {\r\n      this._names.push(name);\r\n      this._node.setAttribute("class", this._names.join(" "));\r\n    }\r\n  },\r\n  remove: function(name) {\r\n    var i = this._names.indexOf(name);\r\n    if (i >= 0) {\r\n      this._names.splice(i, 1);\r\n      this._node.setAttribute("class", this._names.join(" "));\r\n    }\r\n  },\r\n  contains: function(name) {\r\n    return this._names.indexOf(name) >= 0;\r\n  }\r\n};\r\n\r\nfunction classedAdd(node, names) {\r\n  var list = classList(node), i = -1, n = names.length;\r\n  while (++i < n) list.add(names[i]);\r\n}\r\n\r\nfunction classedRemove(node, names) {\r\n  var list = classList(node), i = -1, n = names.length;\r\n  while (++i < n) list.remove(names[i]);\r\n}\r\n\r\nfunction classedTrue(names) {\r\n  return function() {\r\n    classedAdd(this, names);\r\n  };\r\n}\r\n\r\nfunction classedFalse(names) {\r\n  return function() {\r\n    classedRemove(this, names);\r\n  };\r\n}\r\n\r\nfunction classedFunction(names, value) {\r\n  return function() {\r\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function classed(name, value) {\r\n  var names = classArray(name + "");\r\n\r\n  if (arguments.length < 2) {\r\n    var list = classList(this.node()), i = -1, n = names.length;\r\n    while (++i < n) if (!list.contains(names[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  return this.each((typeof value === "function"\r\n      ? classedFunction : value\r\n      ? classedTrue\r\n      : classedFalse)(names, value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/text.js\nfunction textRemove() {\r\n  this.textContent = "";\r\n}\r\n\r\nfunction textConstant(value) {\r\n  return function() {\r\n    this.textContent = value;\r\n  };\r\n}\r\n\r\nfunction textFunction(value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    this.textContent = v == null ? "" : v;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function selection_text(value) {\r\n  return arguments.length\r\n      ? this.each(value == null\r\n          ? textRemove : (typeof value === "function"\r\n          ? textFunction\r\n          : textConstant)(value))\r\n      : this.node().textContent;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/html.js\nfunction htmlRemove() {\r\n  this.innerHTML = "";\r\n}\r\n\r\nfunction htmlConstant(value) {\r\n  return function() {\r\n    this.innerHTML = value;\r\n  };\r\n}\r\n\r\nfunction htmlFunction(value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    this.innerHTML = v == null ? "" : v;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function html(value) {\r\n  return arguments.length\r\n      ? this.each(value == null\r\n          ? htmlRemove : (typeof value === "function"\r\n          ? htmlFunction\r\n          : htmlConstant)(value))\r\n      : this.node().innerHTML;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/raise.js\nfunction raise() {\r\n  if (this.nextSibling) this.parentNode.appendChild(this);\r\n}\r\n\r\n/* harmony default export */ function selection_raise() {\r\n  return this.each(raise);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/lower.js\nfunction lower() {\r\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\r\n}\r\n\r\n/* harmony default export */ function selection_lower() {\r\n  return this.each(lower);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/creator.js\n\r\n\r\n\r\nfunction creatorInherit(name) {\r\n  return function() {\r\n    var document = this.ownerDocument,\r\n        uri = this.namespaceURI;\r\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\r\n        ? document.createElement(name)\r\n        : document.createElementNS(uri, name);\r\n  };\r\n}\r\n\r\nfunction creatorFixed(fullname) {\r\n  return function() {\r\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function creator(name) {\r\n  var fullname = namespace(name);\r\n  return (fullname.local\r\n      ? creatorFixed\r\n      : creatorInherit)(fullname);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/append.js\n\r\n\r\n/* harmony default export */ function append(name) {\r\n  var create = typeof name === "function" ? name : creator(name);\r\n  return this.select(function() {\r\n    return this.appendChild(create.apply(this, arguments));\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/insert.js\n\r\n\r\n\r\nfunction constantNull() {\r\n  return null;\r\n}\r\n\r\n/* harmony default export */ function insert(name, before) {\r\n  var create = typeof name === "function" ? name : creator(name),\r\n      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);\r\n  return this.select(function() {\r\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/remove.js\nfunction remove() {\r\n  var parent = this.parentNode;\r\n  if (parent) parent.removeChild(this);\r\n}\r\n\r\n/* harmony default export */ function selection_remove() {\r\n  return this.each(remove);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/clone.js\nfunction selection_cloneShallow() {\r\n  var clone = this.cloneNode(false), parent = this.parentNode;\r\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n}\r\n\r\nfunction selection_cloneDeep() {\r\n  var clone = this.cloneNode(true), parent = this.parentNode;\r\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n}\r\n\r\n/* harmony default export */ function clone(deep) {\r\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/datum.js\n/* harmony default export */ function selection_datum(value) {\r\n  return arguments.length\r\n      ? this.property("__data__", value)\r\n      : this.node().__data__;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/on.js\nfunction contextListener(listener) {\r\n  return function(event) {\r\n    listener.call(this, event, this.__data__);\r\n  };\r\n}\r\n\r\nfunction parseTypenames(typenames) {\r\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n    var name = "", i = t.indexOf(".");\r\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n    return {type: t, name: name};\r\n  });\r\n}\r\n\r\nfunction onRemove(typename) {\r\n  return function() {\r\n    var on = this.__on;\r\n    if (!on) return;\r\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\r\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.options);\r\n      } else {\r\n        on[++i] = o;\r\n      }\r\n    }\r\n    if (++i) on.length = i;\r\n    else delete this.__on;\r\n  };\r\n}\r\n\r\nfunction onAdd(typename, value, options) {\r\n  return function() {\r\n    var on = this.__on, o, listener = contextListener(value);\r\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\r\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.options);\r\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\r\n        o.value = value;\r\n        return;\r\n      }\r\n    }\r\n    this.addEventListener(typename.type, listener, options);\r\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\r\n    if (!on) this.__on = [o];\r\n    else on.push(o);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function on(typename, value, options) {\r\n  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;\r\n\r\n  if (arguments.length < 2) {\r\n    var on = this.node().__on;\r\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\r\n      for (i = 0, o = on[j]; i < n; ++i) {\r\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\r\n          return o.value;\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  on = value ? onAdd : onRemove;\r\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/dispatch.js\n\r\n\r\nfunction dispatchEvent(node, type, params) {\r\n  var window = src_window(node),\r\n      event = window.CustomEvent;\r\n\r\n  if (typeof event === "function") {\r\n    event = new event(type, params);\r\n  } else {\r\n    event = window.document.createEvent("Event");\r\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\r\n    else event.initEvent(type, false, false);\r\n  }\r\n\r\n  node.dispatchEvent(event);\r\n}\r\n\r\nfunction dispatchConstant(type, params) {\r\n  return function() {\r\n    return dispatchEvent(this, type, params);\r\n  };\r\n}\r\n\r\nfunction dispatchFunction(type, params) {\r\n  return function() {\r\n    return dispatchEvent(this, type, params.apply(this, arguments));\r\n  };\r\n}\r\n\r\n/* harmony default export */ function selection_dispatch(type, params) {\r\n  return this.each((typeof params === "function"\r\n      ? dispatchFunction\r\n      : dispatchConstant)(type, params));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/iterator.js\n/* harmony default export */ function* iterator() {\r\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\r\n      if (node = group[i]) yield node;\r\n    }\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar root = [null];\r\n\r\nfunction Selection(groups, parents) {\r\n  this._groups = groups;\r\n  this._parents = parents;\r\n}\r\n\r\nfunction selection() {\r\n  return new Selection([[document.documentElement]], root);\r\n}\r\n\r\nfunction selection_selection() {\r\n  return this;\r\n}\r\n\r\nSelection.prototype = selection.prototype = {\r\n  constructor: Selection,\r\n  select: selection_select,\r\n  selectAll: selectAll,\r\n  selectChild: selectChild,\r\n  selectChildren: selectChildren,\r\n  filter: selection_filter,\r\n  data: data,\r\n  enter: enter,\r\n  exit: exit,\r\n  join: join,\r\n  merge: merge,\r\n  selection: selection_selection,\r\n  order: order,\r\n  sort: sort,\r\n  call: call,\r\n  nodes: nodes,\r\n  node: node,\r\n  size: size,\r\n  empty: selection_empty,\r\n  each: each,\r\n  attr: attr,\r\n  style: style,\r\n  property: property,\r\n  classed: classed,\r\n  text: selection_text,\r\n  html: html,\r\n  raise: selection_raise,\r\n  lower: selection_lower,\r\n  append: append,\r\n  insert: insert,\r\n  remove: selection_remove,\r\n  clone: clone,\r\n  datum: selection_datum,\r\n  on: on,\r\n  dispatch: selection_dispatch,\r\n  [Symbol.iterator]: iterator\r\n};\r\n\r\n/* harmony default export */ const src_selection = (selection);\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-dispatch/src/dispatch.js\nvar noop = {value: () => {}};\r\n\r\nfunction dispatch_dispatch() {\r\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\r\n    if (!(t = arguments[i] + "") || (t in _) || /[\\s.]/.test(t)) throw new Error("illegal type: " + t);\r\n    _[t] = [];\r\n  }\r\n  return new Dispatch(_);\r\n}\r\n\r\nfunction Dispatch(_) {\r\n  this._ = _;\r\n}\r\n\r\nfunction dispatch_parseTypenames(typenames, types) {\r\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n    var name = "", i = t.indexOf(".");\r\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);\r\n    return {type: t, name: name};\r\n  });\r\n}\r\n\r\nDispatch.prototype = dispatch_dispatch.prototype = {\r\n  constructor: Dispatch,\r\n  on: function(typename, callback) {\r\n    var _ = this._,\r\n        T = dispatch_parseTypenames(typename + "", _),\r\n        t,\r\n        i = -1,\r\n        n = T.length;\r\n\r\n    // If no callback was specified, return the callback of the given type and name.\r\n    if (arguments.length < 2) {\r\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\r\n      return;\r\n    }\r\n\r\n    // If a type was specified, set the callback for the given type and name.\r\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\r\n    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);\r\n    while (++i < n) {\r\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\r\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\r\n    }\r\n\r\n    return this;\r\n  },\r\n  copy: function() {\r\n    var copy = {}, _ = this._;\r\n    for (var t in _) copy[t] = _[t].slice();\r\n    return new Dispatch(copy);\r\n  },\r\n  call: function(type, that) {\r\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\r\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\r\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n  },\r\n  apply: function(type, that, args) {\r\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\r\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n  }\r\n};\r\n\r\nfunction get(type, name) {\r\n  for (var i = 0, n = type.length, c; i < n; ++i) {\r\n    if ((c = type[i]).name === name) {\r\n      return c.value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction set(type, name, callback) {\r\n  for (var i = 0, n = type.length; i < n; ++i) {\r\n    if (type[i].name === name) {\r\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\r\n      break;\r\n    }\r\n  }\r\n  if (callback != null) type.push({name: name, value: callback});\r\n  return type;\r\n}\r\n\r\n/* harmony default export */ const src_dispatch = (dispatch_dispatch);\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-timer/src/timer.js\nvar timer_frame = 0, // is an animation frame pending?\r\n    timeout = 0, // is a timeout pending?\r\n    interval = 0, // are any timers active?\r\n    pokeDelay = 1000, // how frequently we check for clock skew\r\n    taskHead,\r\n    taskTail,\r\n    clockLast = 0,\r\n    clockNow = 0,\r\n    clockSkew = 0,\r\n    clock = typeof performance === "object" && performance.now ? performance : Date,\r\n    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\r\n\r\nfunction now() {\r\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\r\n}\r\n\r\nfunction clearNow() {\r\n  clockNow = 0;\r\n}\r\n\r\nfunction Timer() {\r\n  this._call =\r\n  this._time =\r\n  this._next = null;\r\n}\r\n\r\nTimer.prototype = timer.prototype = {\r\n  constructor: Timer,\r\n  restart: function(callback, delay, time) {\r\n    if (typeof callback !== "function") throw new TypeError("callback is not a function");\r\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\r\n    if (!this._next && taskTail !== this) {\r\n      if (taskTail) taskTail._next = this;\r\n      else taskHead = this;\r\n      taskTail = this;\r\n    }\r\n    this._call = callback;\r\n    this._time = time;\r\n    sleep();\r\n  },\r\n  stop: function() {\r\n    if (this._call) {\r\n      this._call = null;\r\n      this._time = Infinity;\r\n      sleep();\r\n    }\r\n  }\r\n};\r\n\r\nfunction timer(callback, delay, time) {\r\n  var t = new Timer;\r\n  t.restart(callback, delay, time);\r\n  return t;\r\n}\r\n\r\nfunction timerFlush() {\r\n  now(); // Get the current time, if not already set.\r\n  ++timer_frame; // Pretend we’ve set an alarm, if we haven’t already.\r\n  var t = taskHead, e;\r\n  while (t) {\r\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\r\n    t = t._next;\r\n  }\r\n  --timer_frame;\r\n}\r\n\r\nfunction wake() {\r\n  clockNow = (clockLast = clock.now()) + clockSkew;\r\n  timer_frame = timeout = 0;\r\n  try {\r\n    timerFlush();\r\n  } finally {\r\n    timer_frame = 0;\r\n    nap();\r\n    clockNow = 0;\r\n  }\r\n}\r\n\r\nfunction poke() {\r\n  var now = clock.now(), delay = now - clockLast;\r\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\r\n}\r\n\r\nfunction nap() {\r\n  var t0, t1 = taskHead, t2, time = Infinity;\r\n  while (t1) {\r\n    if (t1._call) {\r\n      if (time > t1._time) time = t1._time;\r\n      t0 = t1, t1 = t1._next;\r\n    } else {\r\n      t2 = t1._next, t1._next = null;\r\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\r\n    }\r\n  }\r\n  taskTail = t0;\r\n  sleep(time);\r\n}\r\n\r\nfunction sleep(time) {\r\n  if (timer_frame) return; // Soonest alarm already set, or will be.\r\n  if (timeout) timeout = clearTimeout(timeout);\r\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\r\n  if (delay > 24) {\r\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\r\n    if (interval) interval = clearInterval(interval);\r\n  } else {\r\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\r\n    timer_frame = 1, setFrame(wake);\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-timer/src/timeout.js\n\r\n\r\n/* harmony default export */ function src_timeout(callback, delay, time) {\r\n  var t = new Timer;\r\n  delay = delay == null ? 0 : +delay;\r\n  t.restart(elapsed => {\r\n    t.stop();\r\n    callback(elapsed + delay);\r\n  }, delay, time);\r\n  return t;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/schedule.js\n\r\n\r\n\r\nvar emptyOn = src_dispatch("start", "end", "cancel", "interrupt");\r\nvar emptyTween = [];\r\n\r\nvar CREATED = 0;\r\nvar SCHEDULED = 1;\r\nvar STARTING = 2;\r\nvar STARTED = 3;\r\nvar RUNNING = 4;\r\nvar ENDING = 5;\r\nvar ENDED = 6;\r\n\r\n/* harmony default export */ function schedule(node, name, id, index, group, timing) {\r\n  var schedules = node.__transition;\r\n  if (!schedules) node.__transition = {};\r\n  else if (id in schedules) return;\r\n  create(node, id, {\r\n    name: name,\r\n    index: index, // For context during callback.\r\n    group: group, // For context during callback.\r\n    on: emptyOn,\r\n    tween: emptyTween,\r\n    time: timing.time,\r\n    delay: timing.delay,\r\n    duration: timing.duration,\r\n    ease: timing.ease,\r\n    timer: null,\r\n    state: CREATED\r\n  });\r\n}\r\n\r\nfunction init(node, id) {\r\n  var schedule = schedule_get(node, id);\r\n  if (schedule.state > CREATED) throw new Error("too late; already scheduled");\r\n  return schedule;\r\n}\r\n\r\nfunction schedule_set(node, id) {\r\n  var schedule = schedule_get(node, id);\r\n  if (schedule.state > STARTED) throw new Error("too late; already running");\r\n  return schedule;\r\n}\r\n\r\nfunction schedule_get(node, id) {\r\n  var schedule = node.__transition;\r\n  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");\r\n  return schedule;\r\n}\r\n\r\nfunction create(node, id, self) {\r\n  var schedules = node.__transition,\r\n      tween;\r\n\r\n  // Initialize the self timer when the transition is created.\r\n  // Note the actual delay is not known until the first callback!\r\n  schedules[id] = self;\r\n  self.timer = timer(schedule, 0, self.time);\r\n\r\n  function schedule(elapsed) {\r\n    self.state = SCHEDULED;\r\n    self.timer.restart(start, self.delay, self.time);\r\n\r\n    // If the elapsed delay is less than our first sleep, start immediately.\r\n    if (self.delay <= elapsed) start(elapsed - self.delay);\r\n  }\r\n\r\n  function start(elapsed) {\r\n    var i, j, n, o;\r\n\r\n    // If the state is not SCHEDULED, then we previously errored on start.\r\n    if (self.state !== SCHEDULED) return stop();\r\n\r\n    for (i in schedules) {\r\n      o = schedules[i];\r\n      if (o.name !== self.name) continue;\r\n\r\n      // While this element already has a starting transition during this frame,\r\n      // defer starting an interrupting transition until that transition has a\r\n      // chance to tick (and possibly end); see d3/d3-transition#54!\r\n      if (o.state === STARTED) return src_timeout(start);\r\n\r\n      // Interrupt the active transition, if any.\r\n      if (o.state === RUNNING) {\r\n        o.state = ENDED;\r\n        o.timer.stop();\r\n        o.on.call("interrupt", node, node.__data__, o.index, o.group);\r\n        delete schedules[i];\r\n      }\r\n\r\n      // Cancel any pre-empted transitions.\r\n      else if (+i < id) {\r\n        o.state = ENDED;\r\n        o.timer.stop();\r\n        o.on.call("cancel", node, node.__data__, o.index, o.group);\r\n        delete schedules[i];\r\n      }\r\n    }\r\n\r\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\r\n    // Note the transition may be canceled after start and before the first tick!\r\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\r\n    // Assuming this is successful, subsequent callbacks go straight to tick.\r\n    src_timeout(function() {\r\n      if (self.state === STARTED) {\r\n        self.state = RUNNING;\r\n        self.timer.restart(tick, self.delay, self.time);\r\n        tick(elapsed);\r\n      }\r\n    });\r\n\r\n    // Dispatch the start event.\r\n    // Note this must be done before the tween are initialized.\r\n    self.state = STARTING;\r\n    self.on.call("start", node, node.__data__, self.index, self.group);\r\n    if (self.state !== STARTING) return; // interrupted\r\n    self.state = STARTED;\r\n\r\n    // Initialize the tween, deleting null tween.\r\n    tween = new Array(n = self.tween.length);\r\n    for (i = 0, j = -1; i < n; ++i) {\r\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\r\n        tween[++j] = o;\r\n      }\r\n    }\r\n    tween.length = j + 1;\r\n  }\r\n\r\n  function tick(elapsed) {\r\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\r\n        i = -1,\r\n        n = tween.length;\r\n\r\n    while (++i < n) {\r\n      tween[i].call(node, t);\r\n    }\r\n\r\n    // Dispatch the end event.\r\n    if (self.state === ENDING) {\r\n      self.on.call("end", node, node.__data__, self.index, self.group);\r\n      stop();\r\n    }\r\n  }\r\n\r\n  function stop() {\r\n    self.state = ENDED;\r\n    self.timer.stop();\r\n    delete schedules[id];\r\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\r\n    delete node.__transition;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/interrupt.js\n\r\n\r\n/* harmony default export */ function src_interrupt(node, name) {\r\n  var schedules = node.__transition,\r\n      schedule,\r\n      active,\r\n      empty = true,\r\n      i;\r\n\r\n  if (!schedules) return;\r\n\r\n  name = name == null ? null : name + "";\r\n\r\n  for (i in schedules) {\r\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\r\n    active = schedule.state > STARTING && schedule.state < ENDING;\r\n    schedule.state = ENDED;\r\n    schedule.timer.stop();\r\n    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);\r\n    delete schedules[i];\r\n  }\r\n\r\n  if (empty) delete node.__transition;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/interrupt.js\n\r\n\r\n/* harmony default export */ function selection_interrupt(name) {\r\n  return this.each(function() {\r\n    src_interrupt(this, name);\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/number.js\n/* harmony default export */ function number(a, b) {\r\n  return a = +a, b = +b, function(t) {\r\n    return a * (1 - t) + b * t;\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/decompose.js\nvar degrees = 180 / Math.PI;\r\n\r\nvar decompose_identity = {\r\n  translateX: 0,\r\n  translateY: 0,\r\n  rotate: 0,\r\n  skewX: 0,\r\n  scaleX: 1,\r\n  scaleY: 1\r\n};\r\n\r\n/* harmony default export */ function decompose(a, b, c, d, e, f) {\r\n  var scaleX, scaleY, skewX;\r\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\r\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\r\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\r\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\r\n  return {\r\n    translateX: e,\r\n    translateY: f,\r\n    rotate: Math.atan2(b, a) * degrees,\r\n    skewX: Math.atan(skewX) * degrees,\r\n    scaleX: scaleX,\r\n    scaleY: scaleY\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/parse.js\n\r\n\r\nvar svgNode;\r\n\r\n/* eslint-disable no-undef */\r\nfunction parseCss(value) {\r\n  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");\r\n  return m.isIdentity ? decompose_identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\r\n}\r\n\r\nfunction parseSvg(value) {\r\n  if (value == null) return decompose_identity;\r\n  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");\r\n  svgNode.setAttribute("transform", value);\r\n  if (!(value = svgNode.transform.baseVal.consolidate())) return decompose_identity;\r\n  value = value.matrix;\r\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/index.js\n\r\n\r\n\r\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\r\n\r\n  function pop(s) {\r\n    return s.length ? s.pop() + " " : "";\r\n  }\r\n\r\n  function translate(xa, ya, xb, yb, s, q) {\r\n    if (xa !== xb || ya !== yb) {\r\n      var i = s.push("translate(", null, pxComma, null, pxParen);\r\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\r\n    } else if (xb || yb) {\r\n      s.push("translate(" + xb + pxComma + yb + pxParen);\r\n    }\r\n  }\r\n\r\n  function rotate(a, b, s, q) {\r\n    if (a !== b) {\r\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\r\n      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});\r\n    } else if (b) {\r\n      s.push(pop(s) + "rotate(" + b + degParen);\r\n    }\r\n  }\r\n\r\n  function skewX(a, b, s, q) {\r\n    if (a !== b) {\r\n      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});\r\n    } else if (b) {\r\n      s.push(pop(s) + "skewX(" + b + degParen);\r\n    }\r\n  }\r\n\r\n  function scale(xa, ya, xb, yb, s, q) {\r\n    if (xa !== xb || ya !== yb) {\r\n      var i = s.push(pop(s) + "scale(", null, ",", null, ")");\r\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\r\n    } else if (xb !== 1 || yb !== 1) {\r\n      s.push(pop(s) + "scale(" + xb + "," + yb + ")");\r\n    }\r\n  }\r\n\r\n  return function(a, b) {\r\n    var s = [], // string constants and placeholders\r\n        q = []; // number interpolators\r\n    a = parse(a), b = parse(b);\r\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\r\n    rotate(a.rotate, b.rotate, s, q);\r\n    skewX(a.skewX, b.skewX, s, q);\r\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\r\n    a = b = null; // gc\r\n    return function(t) {\r\n      var i = -1, n = q.length, o;\r\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\r\n      return s.join("");\r\n    };\r\n  };\r\n}\r\n\r\nvar interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");\r\nvar interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/tween.js\n\r\n\r\nfunction tweenRemove(id, name) {\r\n  var tween0, tween1;\r\n  return function() {\r\n    var schedule = schedule_set(this, id),\r\n        tween = schedule.tween;\r\n\r\n    // If this node shared tween with the previous node,\r\n    // just assign the updated shared tween and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (tween !== tween0) {\r\n      tween1 = tween0 = tween;\r\n      for (var i = 0, n = tween1.length; i < n; ++i) {\r\n        if (tween1[i].name === name) {\r\n          tween1 = tween1.slice();\r\n          tween1.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    schedule.tween = tween1;\r\n  };\r\n}\r\n\r\nfunction tweenFunction(id, name, value) {\r\n  var tween0, tween1;\r\n  if (typeof value !== "function") throw new Error;\r\n  return function() {\r\n    var schedule = schedule_set(this, id),\r\n        tween = schedule.tween;\r\n\r\n    // If this node shared tween with the previous node,\r\n    // just assign the updated shared tween and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (tween !== tween0) {\r\n      tween1 = (tween0 = tween).slice();\r\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\r\n        if (tween1[i].name === name) {\r\n          tween1[i] = t;\r\n          break;\r\n        }\r\n      }\r\n      if (i === n) tween1.push(t);\r\n    }\r\n\r\n    schedule.tween = tween1;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function tween(name, value) {\r\n  var id = this._id;\r\n\r\n  name += "";\r\n\r\n  if (arguments.length < 2) {\r\n    var tween = schedule_get(this.node(), id).tween;\r\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\r\n      if ((t = tween[i]).name === name) {\r\n        return t.value;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\r\n}\r\n\r\nfunction tweenValue(transition, name, value) {\r\n  var id = transition._id;\r\n\r\n  transition.each(function() {\r\n    var schedule = schedule_set(this, id);\r\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\r\n  });\r\n\r\n  return function(node) {\r\n    return schedule_get(node, id).value[name];\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-color/src/define.js\n/* harmony default export */ function src_define(constructor, factory, prototype) {\r\n  constructor.prototype = factory.prototype = prototype;\r\n  prototype.constructor = constructor;\r\n}\r\n\r\nfunction extend(parent, definition) {\r\n  var prototype = Object.create(parent.prototype);\r\n  for (var key in definition) prototype[key] = definition[key];\r\n  return prototype;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-color/src/color.js\n\r\n\r\nfunction Color() {}\r\n\r\nvar darker = 0.7;\r\nvar brighter = 1 / darker;\r\n\r\nvar reI = "\\\\s*([+-]?\\\\d+)\\\\s*",\r\n    reN = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*",\r\n    reP = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*",\r\n    reHex = /^#([0-9a-f]{3,8})$/,\r\n    reRgbInteger = new RegExp("^rgb\\\\(" + [reI, reI, reI] + "\\\\)$"),\r\n    reRgbPercent = new RegExp("^rgb\\\\(" + [reP, reP, reP] + "\\\\)$"),\r\n    reRgbaInteger = new RegExp("^rgba\\\\(" + [reI, reI, reI, reN] + "\\\\)$"),\r\n    reRgbaPercent = new RegExp("^rgba\\\\(" + [reP, reP, reP, reN] + "\\\\)$"),\r\n    reHslPercent = new RegExp("^hsl\\\\(" + [reN, reP, reP] + "\\\\)$"),\r\n    reHslaPercent = new RegExp("^hsla\\\\(" + [reN, reP, reP, reN] + "\\\\)$");\r\n\r\nvar named = {\r\n  aliceblue: 0xf0f8ff,\r\n  antiquewhite: 0xfaebd7,\r\n  aqua: 0x00ffff,\r\n  aquamarine: 0x7fffd4,\r\n  azure: 0xf0ffff,\r\n  beige: 0xf5f5dc,\r\n  bisque: 0xffe4c4,\r\n  black: 0x000000,\r\n  blanchedalmond: 0xffebcd,\r\n  blue: 0x0000ff,\r\n  blueviolet: 0x8a2be2,\r\n  brown: 0xa52a2a,\r\n  burlywood: 0xdeb887,\r\n  cadetblue: 0x5f9ea0,\r\n  chartreuse: 0x7fff00,\r\n  chocolate: 0xd2691e,\r\n  coral: 0xff7f50,\r\n  cornflowerblue: 0x6495ed,\r\n  cornsilk: 0xfff8dc,\r\n  crimson: 0xdc143c,\r\n  cyan: 0x00ffff,\r\n  darkblue: 0x00008b,\r\n  darkcyan: 0x008b8b,\r\n  darkgoldenrod: 0xb8860b,\r\n  darkgray: 0xa9a9a9,\r\n  darkgreen: 0x006400,\r\n  darkgrey: 0xa9a9a9,\r\n  darkkhaki: 0xbdb76b,\r\n  darkmagenta: 0x8b008b,\r\n  darkolivegreen: 0x556b2f,\r\n  darkorange: 0xff8c00,\r\n  darkorchid: 0x9932cc,\r\n  darkred: 0x8b0000,\r\n  darksalmon: 0xe9967a,\r\n  darkseagreen: 0x8fbc8f,\r\n  darkslateblue: 0x483d8b,\r\n  darkslategray: 0x2f4f4f,\r\n  darkslategrey: 0x2f4f4f,\r\n  darkturquoise: 0x00ced1,\r\n  darkviolet: 0x9400d3,\r\n  deeppink: 0xff1493,\r\n  deepskyblue: 0x00bfff,\r\n  dimgray: 0x696969,\r\n  dimgrey: 0x696969,\r\n  dodgerblue: 0x1e90ff,\r\n  firebrick: 0xb22222,\r\n  floralwhite: 0xfffaf0,\r\n  forestgreen: 0x228b22,\r\n  fuchsia: 0xff00ff,\r\n  gainsboro: 0xdcdcdc,\r\n  ghostwhite: 0xf8f8ff,\r\n  gold: 0xffd700,\r\n  goldenrod: 0xdaa520,\r\n  gray: 0x808080,\r\n  green: 0x008000,\r\n  greenyellow: 0xadff2f,\r\n  grey: 0x808080,\r\n  honeydew: 0xf0fff0,\r\n  hotpink: 0xff69b4,\r\n  indianred: 0xcd5c5c,\r\n  indigo: 0x4b0082,\r\n  ivory: 0xfffff0,\r\n  khaki: 0xf0e68c,\r\n  lavender: 0xe6e6fa,\r\n  lavenderblush: 0xfff0f5,\r\n  lawngreen: 0x7cfc00,\r\n  lemonchiffon: 0xfffacd,\r\n  lightblue: 0xadd8e6,\r\n  lightcoral: 0xf08080,\r\n  lightcyan: 0xe0ffff,\r\n  lightgoldenrodyellow: 0xfafad2,\r\n  lightgray: 0xd3d3d3,\r\n  lightgreen: 0x90ee90,\r\n  lightgrey: 0xd3d3d3,\r\n  lightpink: 0xffb6c1,\r\n  lightsalmon: 0xffa07a,\r\n  lightseagreen: 0x20b2aa,\r\n  lightskyblue: 0x87cefa,\r\n  lightslategray: 0x778899,\r\n  lightslategrey: 0x778899,\r\n  lightsteelblue: 0xb0c4de,\r\n  lightyellow: 0xffffe0,\r\n  lime: 0x00ff00,\r\n  limegreen: 0x32cd32,\r\n  linen: 0xfaf0e6,\r\n  magenta: 0xff00ff,\r\n  maroon: 0x800000,\r\n  mediumaquamarine: 0x66cdaa,\r\n  mediumblue: 0x0000cd,\r\n  mediumorchid: 0xba55d3,\r\n  mediumpurple: 0x9370db,\r\n  mediumseagreen: 0x3cb371,\r\n  mediumslateblue: 0x7b68ee,\r\n  mediumspringgreen: 0x00fa9a,\r\n  mediumturquoise: 0x48d1cc,\r\n  mediumvioletred: 0xc71585,\r\n  midnightblue: 0x191970,\r\n  mintcream: 0xf5fffa,\r\n  mistyrose: 0xffe4e1,\r\n  moccasin: 0xffe4b5,\r\n  navajowhite: 0xffdead,\r\n  navy: 0x000080,\r\n  oldlace: 0xfdf5e6,\r\n  olive: 0x808000,\r\n  olivedrab: 0x6b8e23,\r\n  orange: 0xffa500,\r\n  orangered: 0xff4500,\r\n  orchid: 0xda70d6,\r\n  palegoldenrod: 0xeee8aa,\r\n  palegreen: 0x98fb98,\r\n  paleturquoise: 0xafeeee,\r\n  palevioletred: 0xdb7093,\r\n  papayawhip: 0xffefd5,\r\n  peachpuff: 0xffdab9,\r\n  peru: 0xcd853f,\r\n  pink: 0xffc0cb,\r\n  plum: 0xdda0dd,\r\n  powderblue: 0xb0e0e6,\r\n  purple: 0x800080,\r\n  rebeccapurple: 0x663399,\r\n  red: 0xff0000,\r\n  rosybrown: 0xbc8f8f,\r\n  royalblue: 0x4169e1,\r\n  saddlebrown: 0x8b4513,\r\n  salmon: 0xfa8072,\r\n  sandybrown: 0xf4a460,\r\n  seagreen: 0x2e8b57,\r\n  seashell: 0xfff5ee,\r\n  sienna: 0xa0522d,\r\n  silver: 0xc0c0c0,\r\n  skyblue: 0x87ceeb,\r\n  slateblue: 0x6a5acd,\r\n  slategray: 0x708090,\r\n  slategrey: 0x708090,\r\n  snow: 0xfffafa,\r\n  springgreen: 0x00ff7f,\r\n  steelblue: 0x4682b4,\r\n  tan: 0xd2b48c,\r\n  teal: 0x008080,\r\n  thistle: 0xd8bfd8,\r\n  tomato: 0xff6347,\r\n  turquoise: 0x40e0d0,\r\n  violet: 0xee82ee,\r\n  wheat: 0xf5deb3,\r\n  white: 0xffffff,\r\n  whitesmoke: 0xf5f5f5,\r\n  yellow: 0xffff00,\r\n  yellowgreen: 0x9acd32\r\n};\r\n\r\nsrc_define(Color, color, {\r\n  copy: function(channels) {\r\n    return Object.assign(new this.constructor, this, channels);\r\n  },\r\n  displayable: function() {\r\n    return this.rgb().displayable();\r\n  },\r\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\r\n  formatHex: color_formatHex,\r\n  formatHsl: color_formatHsl,\r\n  formatRgb: color_formatRgb,\r\n  toString: color_formatRgb\r\n});\r\n\r\nfunction color_formatHex() {\r\n  return this.rgb().formatHex();\r\n}\r\n\r\nfunction color_formatHsl() {\r\n  return hslConvert(this).formatHsl();\r\n}\r\n\r\nfunction color_formatRgb() {\r\n  return this.rgb().formatRgb();\r\n}\r\n\r\nfunction color(format) {\r\n  var m, l;\r\n  format = (format + "").trim().toLowerCase();\r\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\r\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\r\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\r\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\r\n      : null) // invalid hex\r\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\r\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\r\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\r\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\r\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\r\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\r\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\r\n      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)\r\n      : null;\r\n}\r\n\r\nfunction rgbn(n) {\r\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\r\n}\r\n\r\nfunction rgba(r, g, b, a) {\r\n  if (a <= 0) r = g = b = NaN;\r\n  return new Rgb(r, g, b, a);\r\n}\r\n\r\nfunction rgbConvert(o) {\r\n  if (!(o instanceof Color)) o = color(o);\r\n  if (!o) return new Rgb;\r\n  o = o.rgb();\r\n  return new Rgb(o.r, o.g, o.b, o.opacity);\r\n}\r\n\r\nfunction color_rgb(r, g, b, opacity) {\r\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Rgb(r, g, b, opacity) {\r\n  this.r = +r;\r\n  this.g = +g;\r\n  this.b = +b;\r\n  this.opacity = +opacity;\r\n}\r\n\r\nsrc_define(Rgb, color_rgb, extend(Color, {\r\n  brighter: function(k) {\r\n    k = k == null ? brighter : Math.pow(brighter, k);\r\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    k = k == null ? darker : Math.pow(darker, k);\r\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    return this;\r\n  },\r\n  displayable: function() {\r\n    return (-0.5 <= this.r && this.r < 255.5)\r\n        && (-0.5 <= this.g && this.g < 255.5)\r\n        && (-0.5 <= this.b && this.b < 255.5)\r\n        && (0 <= this.opacity && this.opacity <= 1);\r\n  },\r\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\r\n  formatHex: rgb_formatHex,\r\n  formatRgb: rgb_formatRgb,\r\n  toString: rgb_formatRgb\r\n}));\r\n\r\nfunction rgb_formatHex() {\r\n  return "#" + hex(this.r) + hex(this.g) + hex(this.b);\r\n}\r\n\r\nfunction rgb_formatRgb() {\r\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n  return (a === 1 ? "rgb(" : "rgba(")\r\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "\r\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "\r\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\r\n      + (a === 1 ? ")" : ", " + a + ")");\r\n}\r\n\r\nfunction hex(value) {\r\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\r\n  return (value < 16 ? "0" : "") + value.toString(16);\r\n}\r\n\r\nfunction hsla(h, s, l, a) {\r\n  if (a <= 0) h = s = l = NaN;\r\n  else if (l <= 0 || l >= 1) h = s = NaN;\r\n  else if (s <= 0) h = NaN;\r\n  return new Hsl(h, s, l, a);\r\n}\r\n\r\nfunction hslConvert(o) {\r\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\r\n  if (!(o instanceof Color)) o = color(o);\r\n  if (!o) return new Hsl;\r\n  if (o instanceof Hsl) return o;\r\n  o = o.rgb();\r\n  var r = o.r / 255,\r\n      g = o.g / 255,\r\n      b = o.b / 255,\r\n      min = Math.min(r, g, b),\r\n      max = Math.max(r, g, b),\r\n      h = NaN,\r\n      s = max - min,\r\n      l = (max + min) / 2;\r\n  if (s) {\r\n    if (r === max) h = (g - b) / s + (g < b) * 6;\r\n    else if (g === max) h = (b - r) / s + 2;\r\n    else h = (r - g) / s + 4;\r\n    s /= l < 0.5 ? max + min : 2 - max - min;\r\n    h *= 60;\r\n  } else {\r\n    s = l > 0 && l < 1 ? 0 : h;\r\n  }\r\n  return new Hsl(h, s, l, o.opacity);\r\n}\r\n\r\nfunction hsl(h, s, l, opacity) {\r\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Hsl(h, s, l, opacity) {\r\n  this.h = +h;\r\n  this.s = +s;\r\n  this.l = +l;\r\n  this.opacity = +opacity;\r\n}\r\n\r\nsrc_define(Hsl, hsl, extend(Color, {\r\n  brighter: function(k) {\r\n    k = k == null ? brighter : Math.pow(brighter, k);\r\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    k = k == null ? darker : Math.pow(darker, k);\r\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    var h = this.h % 360 + (this.h < 0) * 360,\r\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\r\n        l = this.l,\r\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\r\n        m1 = 2 * l - m2;\r\n    return new Rgb(\r\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\r\n      hsl2rgb(h, m1, m2),\r\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\r\n      this.opacity\r\n    );\r\n  },\r\n  displayable: function() {\r\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\r\n        && (0 <= this.l && this.l <= 1)\r\n        && (0 <= this.opacity && this.opacity <= 1);\r\n  },\r\n  formatHsl: function() {\r\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n    return (a === 1 ? "hsl(" : "hsla(")\r\n        + (this.h || 0) + ", "\r\n        + (this.s || 0) * 100 + "%, "\r\n        + (this.l || 0) * 100 + "%"\r\n        + (a === 1 ? ")" : ", " + a + ")");\r\n  }\r\n}));\r\n\r\n/* From FvD 13.37, CSS Color Module Level 3 */\r\nfunction hsl2rgb(h, m1, m2) {\r\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\r\n      : h < 180 ? m2\r\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\r\n      : m1) * 255;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basis.js\nfunction basis(t1, v0, v1, v2, v3) {\r\n  var t2 = t1 * t1, t3 = t2 * t1;\r\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\r\n      + (4 - 6 * t2 + 3 * t3) * v1\r\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\r\n      + t3 * v3) / 6;\r\n}\r\n\r\n/* harmony default export */ function src_basis(values) {\r\n  var n = values.length - 1;\r\n  return function(t) {\r\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\r\n        v1 = values[i],\r\n        v2 = values[i + 1],\r\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\r\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\r\n    return basis((t - i / n) * n, v0, v1, v2, v3);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basisClosed.js\n\r\n\r\n/* harmony default export */ function basisClosed(values) {\r\n  var n = values.length;\r\n  return function(t) {\r\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\r\n        v0 = values[(i + n - 1) % n],\r\n        v1 = values[i % n],\r\n        v2 = values[(i + 1) % n],\r\n        v3 = values[(i + 2) % n];\r\n    return basis((t - i / n) * n, v0, v1, v2, v3);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/constant.js\n/* harmony default export */ const d3_interpolate_src_constant = (x => () => x);\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/color.js\n\r\n\r\nfunction linear(a, d) {\r\n  return function(t) {\r\n    return a + t * d;\r\n  };\r\n}\r\n\r\nfunction exponential(a, b, y) {\r\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\r\n    return Math.pow(a + t * b, y);\r\n  };\r\n}\r\n\r\nfunction hue(a, b) {\r\n  var d = b - a;\r\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\r\n}\r\n\r\nfunction gamma(y) {\r\n  return (y = +y) === 1 ? nogamma : function(a, b) {\r\n    return b - a ? exponential(a, b, y) : d3_interpolate_src_constant(isNaN(a) ? b : a);\r\n  };\r\n}\r\n\r\nfunction nogamma(a, b) {\r\n  var d = b - a;\r\n  return d ? linear(a, d) : d3_interpolate_src_constant(isNaN(a) ? b : a);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/rgb.js\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const rgb = ((function rgbGamma(y) {\r\n  var color = gamma(y);\r\n\r\n  function rgb(start, end) {\r\n    var r = color((start = color_rgb(start)).r, (end = color_rgb(end)).r),\r\n        g = color(start.g, end.g),\r\n        b = color(start.b, end.b),\r\n        opacity = nogamma(start.opacity, end.opacity);\r\n    return function(t) {\r\n      start.r = r(t);\r\n      start.g = g(t);\r\n      start.b = b(t);\r\n      start.opacity = opacity(t);\r\n      return start + "";\r\n    };\r\n  }\r\n\r\n  rgb.gamma = rgbGamma;\r\n\r\n  return rgb;\r\n})(1));\r\n\r\nfunction rgbSpline(spline) {\r\n  return function(colors) {\r\n    var n = colors.length,\r\n        r = new Array(n),\r\n        g = new Array(n),\r\n        b = new Array(n),\r\n        i, color;\r\n    for (i = 0; i < n; ++i) {\r\n      color = color_rgb(colors[i]);\r\n      r[i] = color.r || 0;\r\n      g[i] = color.g || 0;\r\n      b[i] = color.b || 0;\r\n    }\r\n    r = spline(r);\r\n    g = spline(g);\r\n    b = spline(b);\r\n    color.opacity = 1;\r\n    return function(t) {\r\n      color.r = r(t);\r\n      color.g = g(t);\r\n      color.b = b(t);\r\n      return color + "";\r\n    };\r\n  };\r\n}\r\n\r\nvar rgbBasis = rgbSpline(src_basis);\r\nvar rgbBasisClosed = rgbSpline(basisClosed);\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/string.js\n\r\n\r\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\r\n    reB = new RegExp(reA.source, "g");\r\n\r\nfunction zero(b) {\r\n  return function() {\r\n    return b;\r\n  };\r\n}\r\n\r\nfunction one(b) {\r\n  return function(t) {\r\n    return b(t) + "";\r\n  };\r\n}\r\n\r\n/* harmony default export */ function string(a, b) {\r\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\r\n      am, // current match in a\r\n      bm, // current match in b\r\n      bs, // string preceding current number in b, if any\r\n      i = -1, // index in s\r\n      s = [], // string constants and placeholders\r\n      q = []; // number interpolators\r\n\r\n  // Coerce inputs to strings.\r\n  a = a + "", b = b + "";\r\n\r\n  // Interpolate pairs of numbers in a & b.\r\n  while ((am = reA.exec(a))\r\n      && (bm = reB.exec(b))) {\r\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\r\n      bs = b.slice(bi, bs);\r\n      if (s[i]) s[i] += bs; // coalesce with previous string\r\n      else s[++i] = bs;\r\n    }\r\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\r\n      if (s[i]) s[i] += bm; // coalesce with previous string\r\n      else s[++i] = bm;\r\n    } else { // interpolate non-matching numbers\r\n      s[++i] = null;\r\n      q.push({i: i, x: number(am, bm)});\r\n    }\r\n    bi = reB.lastIndex;\r\n  }\r\n\r\n  // Add remains of b.\r\n  if (bi < b.length) {\r\n    bs = b.slice(bi);\r\n    if (s[i]) s[i] += bs; // coalesce with previous string\r\n    else s[++i] = bs;\r\n  }\r\n\r\n  // Special optimization for only a single match.\r\n  // Otherwise, interpolate each of the numbers and rejoin the string.\r\n  return s.length < 2 ? (q[0]\r\n      ? one(q[0].x)\r\n      : zero(b))\r\n      : (b = q.length, function(t) {\r\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\r\n          return s.join("");\r\n        });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/interpolate.js\n\r\n\r\n\r\n/* harmony default export */ function transition_interpolate(a, b) {\r\n  var c;\r\n  return (typeof b === "number" ? number\r\n      : b instanceof color ? rgb\r\n      : (c = color(b)) ? (b = c, rgb)\r\n      : string)(a, b);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attr.js\n\r\n\r\n\r\n\r\n\r\nfunction attr_attrRemove(name) {\r\n  return function() {\r\n    this.removeAttribute(name);\r\n  };\r\n}\r\n\r\nfunction attr_attrRemoveNS(fullname) {\r\n  return function() {\r\n    this.removeAttributeNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\nfunction attr_attrConstant(name, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + "",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = this.getAttribute(name);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction attr_attrConstantNS(fullname, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + "",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction attr_attrFunction(name, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0, value1 = value(this), string1;\r\n    if (value1 == null) return void this.removeAttribute(name);\r\n    string0 = this.getAttribute(name);\r\n    string1 = value1 + "";\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\nfunction attr_attrFunctionNS(fullname, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0, value1 = value(this), string1;\r\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\r\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n    string1 = value1 + "";\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_attr(name, value) {\r\n  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : transition_interpolate;\r\n  return this.attrTween(name, typeof value === "function"\r\n      ? (fullname.local ? attr_attrFunctionNS : attr_attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))\r\n      : value == null ? (fullname.local ? attr_attrRemoveNS : attr_attrRemove)(fullname)\r\n      : (fullname.local ? attr_attrConstantNS : attr_attrConstant)(fullname, i, value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attrTween.js\n\r\n\r\nfunction attrInterpolate(name, i) {\r\n  return function(t) {\r\n    this.setAttribute(name, i.call(this, t));\r\n  };\r\n}\r\n\r\nfunction attrInterpolateNS(fullname, i) {\r\n  return function(t) {\r\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\r\n  };\r\n}\r\n\r\nfunction attrTweenNS(fullname, value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\nfunction attrTween(name, value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\n/* harmony default export */ function transition_attrTween(name, value) {\r\n  var key = "attr." + name;\r\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== "function") throw new Error;\r\n  var fullname = namespace(name);\r\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/delay.js\n\r\n\r\nfunction delayFunction(id, value) {\r\n  return function() {\r\n    init(this, id).delay = +value.apply(this, arguments);\r\n  };\r\n}\r\n\r\nfunction delayConstant(id, value) {\r\n  return value = +value, function() {\r\n    init(this, id).delay = value;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function delay(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each((typeof value === "function"\r\n          ? delayFunction\r\n          : delayConstant)(id, value))\r\n      : schedule_get(this.node(), id).delay;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/duration.js\n\r\n\r\nfunction durationFunction(id, value) {\r\n  return function() {\r\n    schedule_set(this, id).duration = +value.apply(this, arguments);\r\n  };\r\n}\r\n\r\nfunction durationConstant(id, value) {\r\n  return value = +value, function() {\r\n    schedule_set(this, id).duration = value;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function duration(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each((typeof value === "function"\r\n          ? durationFunction\r\n          : durationConstant)(id, value))\r\n      : schedule_get(this.node(), id).duration;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/ease.js\n\r\n\r\nfunction easeConstant(id, value) {\r\n  if (typeof value !== "function") throw new Error;\r\n  return function() {\r\n    schedule_set(this, id).ease = value;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function ease(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each(easeConstant(id, value))\r\n      : schedule_get(this.node(), id).ease;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/easeVarying.js\n\r\n\r\nfunction easeVarying(id, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (typeof v !== "function") throw new Error;\r\n    schedule_set(this, id).ease = v;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_easeVarying(value) {\r\n  if (typeof value !== "function") throw new Error;\r\n  return this.each(easeVarying(this._id, value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/filter.js\n\r\n\r\n\r\n/* harmony default export */ function transition_filter(match) {\r\n  if (typeof match !== "function") match = matcher(match);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n        subgroup.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, this._parents, this._name, this._id);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/merge.js\n\r\n\r\n/* harmony default export */ function transition_merge(transition) {\r\n  if (transition._id !== this._id) throw new Error;\r\n\r\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group0[i] || group1[i]) {\r\n        merge[i] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (; j < m0; ++j) {\r\n    merges[j] = groups0[j];\r\n  }\r\n\r\n  return new Transition(merges, this._parents, this._name, this._id);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/on.js\n\r\n\r\nfunction start(name) {\r\n  return (name + "").trim().split(/^|\\s+/).every(function(t) {\r\n    var i = t.indexOf(".");\r\n    if (i >= 0) t = t.slice(0, i);\r\n    return !t || t === "start";\r\n  });\r\n}\r\n\r\nfunction onFunction(id, name, listener) {\r\n  var on0, on1, sit = start(name) ? init : schedule_set;\r\n  return function() {\r\n    var schedule = sit(this, id),\r\n        on = schedule.on;\r\n\r\n    // If this node shared a dispatch with the previous node,\r\n    // just assign the updated shared dispatch and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\r\n\r\n    schedule.on = on1;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_on(name, listener) {\r\n  var id = this._id;\r\n\r\n  return arguments.length < 2\r\n      ? schedule_get(this.node(), id).on.on(name)\r\n      : this.each(onFunction(id, name, listener));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/remove.js\nfunction removeFunction(id) {\r\n  return function() {\r\n    var parent = this.parentNode;\r\n    for (var i in this.__transition) if (+i !== id) return;\r\n    if (parent) parent.removeChild(this);\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_remove() {\r\n  return this.on("end.remove", removeFunction(this._id));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/select.js\n\r\n\r\n\r\n\r\n/* harmony default export */ function transition_select(select) {\r\n  var name = this._name,\r\n      id = this._id;\r\n\r\n  if (typeof select !== "function") select = selector(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n        if ("__data__" in node) subnode.__data__ = node.__data__;\r\n        subgroup[i] = subnode;\r\n        schedule(subgroup[i], name, id, i, subgroup, schedule_get(node, id));\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, this._parents, name, id);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selectAll.js\n\r\n\r\n\r\n\r\n/* harmony default export */ function transition_selectAll(select) {\r\n  var name = this._name,\r\n      id = this._id;\r\n\r\n  if (typeof select !== "function") select = selectorAll(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = schedule_get(node, id), k = 0, l = children.length; k < l; ++k) {\r\n          if (child = children[k]) {\r\n            schedule(child, name, id, k, children, inherit);\r\n          }\r\n        }\r\n        subgroups.push(children);\r\n        parents.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, parents, name, id);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selection.js\n\r\n\r\nvar selection_Selection = src_selection.prototype.constructor;\r\n\r\n/* harmony default export */ function transition_selection() {\r\n  return new selection_Selection(this._groups, this._parents);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/style.js\n\r\n\r\n\r\n\r\n\r\n\r\nfunction styleNull(name, interpolate) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name),\r\n        string1 = (this.style.removeProperty(name), styleValue(this, name));\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\r\n  };\r\n}\r\n\r\nfunction style_styleRemove(name) {\r\n  return function() {\r\n    this.style.removeProperty(name);\r\n  };\r\n}\r\n\r\nfunction style_styleConstant(name, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + "",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction style_styleFunction(name, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name),\r\n        value1 = value(this),\r\n        string1 = value1 + "";\r\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\nfunction styleMaybeRemove(id, name) {\r\n  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;\r\n  return function() {\r\n    var schedule = schedule_set(this, id),\r\n        on = schedule.on,\r\n        listener = schedule.value[key] == null ? remove || (remove = style_styleRemove(name)) : undefined;\r\n\r\n    // If this node shared a dispatch with the previous node,\r\n    // just assign the updated shared dispatch and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\r\n\r\n    schedule.on = on1;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_style(name, value, priority) {\r\n  var i = (name += "") === "transform" ? interpolateTransformCss : transition_interpolate;\r\n  return value == null ? this\r\n      .styleTween(name, styleNull(name, i))\r\n      .on("end.style." + name, style_styleRemove(name))\r\n    : typeof value === "function" ? this\r\n      .styleTween(name, style_styleFunction(name, i, tweenValue(this, "style." + name, value)))\r\n      .each(styleMaybeRemove(this._id, name))\r\n    : this\r\n      .styleTween(name, style_styleConstant(name, i, value), priority)\r\n      .on("end.style." + name, null);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/styleTween.js\nfunction styleInterpolate(name, i, priority) {\r\n  return function(t) {\r\n    this.style.setProperty(name, i.call(this, t), priority);\r\n  };\r\n}\r\n\r\nfunction styleTween(name, value, priority) {\r\n  var t, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\r\n    return t;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\n/* harmony default export */ function transition_styleTween(name, value, priority) {\r\n  var key = "style." + (name += "");\r\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== "function") throw new Error;\r\n  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/text.js\n\r\n\r\nfunction text_textConstant(value) {\r\n  return function() {\r\n    this.textContent = value;\r\n  };\r\n}\r\n\r\nfunction text_textFunction(value) {\r\n  return function() {\r\n    var value1 = value(this);\r\n    this.textContent = value1 == null ? "" : value1;\r\n  };\r\n}\r\n\r\n/* harmony default export */ function transition_text(value) {\r\n  return this.tween("text", typeof value === "function"\r\n      ? text_textFunction(tweenValue(this, "text", value))\r\n      : text_textConstant(value == null ? "" : value + ""));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/textTween.js\nfunction textInterpolate(i) {\r\n  return function(t) {\r\n    this.textContent = i.call(this, t);\r\n  };\r\n}\r\n\r\nfunction textTween(value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\n/* harmony default export */ function transition_textTween(value) {\r\n  var key = "text";\r\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== "function") throw new Error;\r\n  return this.tween(key, textTween(value));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/transition.js\n\r\n\r\n\r\n/* harmony default export */ function transition() {\r\n  var name = this._name,\r\n      id0 = this._id,\r\n      id1 = newId();\r\n\r\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        var inherit = schedule_get(node, id0);\r\n        schedule(node, name, id1, i, group, {\r\n          time: inherit.time + inherit.delay + inherit.duration,\r\n          delay: 0,\r\n          duration: inherit.duration,\r\n          ease: inherit.ease\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(groups, this._parents, name, id1);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/end.js\n\r\n\r\n/* harmony default export */ function end() {\r\n  var on0, on1, that = this, id = that._id, size = that.size();\r\n  return new Promise(function(resolve, reject) {\r\n    var cancel = {value: reject},\r\n        end = {value: function() { if (--size === 0) resolve(); }};\r\n\r\n    that.each(function() {\r\n      var schedule = schedule_set(this, id),\r\n          on = schedule.on;\r\n\r\n      // If this node shared a dispatch with the previous node,\r\n      // just assign the updated shared dispatch and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (on !== on0) {\r\n        on1 = (on0 = on).copy();\r\n        on1._.cancel.push(cancel);\r\n        on1._.interrupt.push(cancel);\r\n        on1._.end.push(end);\r\n      }\r\n\r\n      schedule.on = on1;\r\n    });\r\n\r\n    // The selection was empty, resolve end immediately\r\n    if (size === 0) resolve();\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar id = 0;\r\n\r\nfunction Transition(groups, parents, name, id) {\r\n  this._groups = groups;\r\n  this._parents = parents;\r\n  this._name = name;\r\n  this._id = id;\r\n}\r\n\r\nfunction transition_transition(name) {\r\n  return src_selection().transition(name);\r\n}\r\n\r\nfunction newId() {\r\n  return ++id;\r\n}\r\n\r\nvar selection_prototype = src_selection.prototype;\r\n\r\nTransition.prototype = transition_transition.prototype = {\r\n  constructor: Transition,\r\n  select: transition_select,\r\n  selectAll: transition_selectAll,\r\n  selectChild: selection_prototype.selectChild,\r\n  selectChildren: selection_prototype.selectChildren,\r\n  filter: transition_filter,\r\n  merge: transition_merge,\r\n  selection: transition_selection,\r\n  transition: transition,\r\n  call: selection_prototype.call,\r\n  nodes: selection_prototype.nodes,\r\n  node: selection_prototype.node,\r\n  size: selection_prototype.size,\r\n  empty: selection_prototype.empty,\r\n  each: selection_prototype.each,\r\n  on: transition_on,\r\n  attr: transition_attr,\r\n  attrTween: transition_attrTween,\r\n  style: transition_style,\r\n  styleTween: transition_styleTween,\r\n  text: transition_text,\r\n  textTween: transition_textTween,\r\n  remove: transition_remove,\r\n  tween: tween,\r\n  delay: delay,\r\n  duration: duration,\r\n  ease: ease,\r\n  easeVarying: transition_easeVarying,\r\n  end: end,\r\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\r\n};\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-ease/src/cubic.js\nfunction cubicIn(t) {\r\n  return t * t * t;\r\n}\r\n\r\nfunction cubicOut(t) {\r\n  return --t * t * t + 1;\r\n}\r\n\r\nfunction cubicInOut(t) {\r\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/transition.js\n\r\n\r\n\r\n\r\n\r\nvar defaultTiming = {\r\n  time: null, // Set on use.\r\n  delay: 0,\r\n  duration: 250,\r\n  ease: cubicInOut\r\n};\r\n\r\nfunction inherit(node, id) {\r\n  var timing;\r\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\r\n    if (!(node = node.parentNode)) {\r\n      throw new Error(`transition ${id} not found`);\r\n    }\r\n  }\r\n  return timing;\r\n}\r\n\r\n/* harmony default export */ function selection_transition(name) {\r\n  var id,\r\n      timing;\r\n\r\n  if (name instanceof Transition) {\r\n    id = name._id, name = name._name;\r\n  } else {\r\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";\r\n  }\r\n\r\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        schedule(node, name, id, i, group, timing || inherit(node, id));\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(groups, this._parents, name, id);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/index.js\n\r\n\r\n\r\n\r\nsrc_selection.prototype.interrupt = selection_interrupt;\r\nsrc_selection.prototype.transition = selection_transition;\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-transition/src/index.js\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-brush/src/brush.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar MODE_DRAG = {name: "drag"},\r\n    MODE_SPACE = {name: "space"},\r\n    MODE_HANDLE = {name: "handle"},\r\n    MODE_CENTER = {name: "center"};\r\n\r\nconst {abs, max, min} = Math;\r\n\r\nfunction number1(e) {\r\n  return [+e[0], +e[1]];\r\n}\r\n\r\nfunction number2(e) {\r\n  return [number1(e[0]), number1(e[1])];\r\n}\r\n\r\nvar X = {\r\n  name: "x",\r\n  handles: ["w", "e"].map(type),\r\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\r\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\r\n};\r\n\r\nvar Y = {\r\n  name: "y",\r\n  handles: ["n", "s"].map(type),\r\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\r\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\r\n};\r\n\r\nvar XY = {\r\n  name: "xy",\r\n  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),\r\n  input: function(xy) { return xy == null ? null : number2(xy); },\r\n  output: function(xy) { return xy; }\r\n};\r\n\r\nvar cursors = {\r\n  overlay: "crosshair",\r\n  selection: "move",\r\n  n: "ns-resize",\r\n  e: "ew-resize",\r\n  s: "ns-resize",\r\n  w: "ew-resize",\r\n  nw: "nwse-resize",\r\n  ne: "nesw-resize",\r\n  se: "nwse-resize",\r\n  sw: "nesw-resize"\r\n};\r\n\r\nvar flipX = {\r\n  e: "w",\r\n  w: "e",\r\n  nw: "ne",\r\n  ne: "nw",\r\n  se: "sw",\r\n  sw: "se"\r\n};\r\n\r\nvar flipY = {\r\n  n: "s",\r\n  s: "n",\r\n  nw: "sw",\r\n  ne: "se",\r\n  se: "ne",\r\n  sw: "nw"\r\n};\r\n\r\nvar signsX = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: null,\r\n  e: +1,\r\n  s: null,\r\n  w: -1,\r\n  nw: -1,\r\n  ne: +1,\r\n  se: +1,\r\n  sw: -1\r\n};\r\n\r\nvar signsY = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: -1,\r\n  e: null,\r\n  s: +1,\r\n  w: null,\r\n  nw: -1,\r\n  ne: -1,\r\n  se: +1,\r\n  sw: +1\r\n};\r\n\r\nfunction type(t) {\r\n  return {type: t};\r\n}\r\n\r\n// Ignore right-click, since that should open the context menu.\r\nfunction defaultFilter(event) {\r\n  return !event.ctrlKey && !event.button;\r\n}\r\n\r\nfunction defaultExtent() {\r\n  var svg = this.ownerSVGElement || this;\r\n  if (svg.hasAttribute("viewBox")) {\r\n    svg = svg.viewBox.baseVal;\r\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\r\n  }\r\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\r\n}\r\n\r\nfunction defaultTouchable() {\r\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\r\n}\r\n\r\n// Like d3.local, but with the name “__brush” rather than auto-generated.\r\nfunction local(node) {\r\n  while (!node.__brush) if (!(node = node.parentNode)) return;\r\n  return node.__brush;\r\n}\r\n\r\nfunction brush_empty(extent) {\r\n  return extent[0][0] === extent[1][0]\r\n      || extent[0][1] === extent[1][1];\r\n}\r\n\r\nfunction brushSelection(node) {\r\n  var state = node.__brush;\r\n  return state ? state.dim.output(state.selection) : null;\r\n}\r\n\r\nfunction brushX() {\r\n  return brush_brush(X);\r\n}\r\n\r\nfunction brushY() {\r\n  return brush_brush(Y);\r\n}\r\n\r\n/* harmony default export */ function brush() {\r\n  return brush_brush(XY);\r\n}\r\n\r\nfunction brush_brush(dim) {\r\n  var extent = defaultExtent,\r\n      filter = defaultFilter,\r\n      touchable = defaultTouchable,\r\n      keys = true,\r\n      listeners = dispatch("start", "brush", "end"),\r\n      handleSize = 6,\r\n      touchending;\r\n\r\n  function brush(group) {\r\n    var overlay = group\r\n        .property("__brush", initialize)\r\n      .selectAll(".overlay")\r\n      .data([type("overlay")]);\r\n\r\n    overlay.enter().append("rect")\r\n        .attr("class", "overlay")\r\n        .attr("pointer-events", "all")\r\n        .attr("cursor", cursors.overlay)\r\n      .merge(overlay)\r\n        .each(function() {\r\n          var extent = local(this).extent;\r\n          select(this)\r\n              .attr("x", extent[0][0])\r\n              .attr("y", extent[0][1])\r\n              .attr("width", extent[1][0] - extent[0][0])\r\n              .attr("height", extent[1][1] - extent[0][1]);\r\n        });\r\n\r\n    group.selectAll(".selection")\r\n      .data([type("selection")])\r\n      .enter().append("rect")\r\n        .attr("class", "selection")\r\n        .attr("cursor", cursors.selection)\r\n        .attr("fill", "#777")\r\n        .attr("fill-opacity", 0.3)\r\n        .attr("stroke", "#fff")\r\n        .attr("shape-rendering", "crispEdges");\r\n\r\n    var handle = group.selectAll(".handle")\r\n      .data(dim.handles, function(d) { return d.type; });\r\n\r\n    handle.exit().remove();\r\n\r\n    handle.enter().append("rect")\r\n        .attr("class", function(d) { return "handle handle--" + d.type; })\r\n        .attr("cursor", function(d) { return cursors[d.type]; });\r\n\r\n    group\r\n        .each(redraw)\r\n        .attr("fill", "none")\r\n        .attr("pointer-events", "all")\r\n        .on("mousedown.brush", started)\r\n      .filter(touchable)\r\n        .on("touchstart.brush", started)\r\n        .on("touchmove.brush", touchmoved)\r\n        .on("touchend.brush touchcancel.brush", touchended)\r\n        .style("touch-action", "none")\r\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\r\n  }\r\n\r\n  brush.move = function(group, selection, event) {\r\n    if (group.tween) {\r\n      group\r\n          .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })\r\n          .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })\r\n          .tween("brush", function() {\r\n            var that = this,\r\n                state = that.__brush,\r\n                emit = emitter(that, arguments),\r\n                selection0 = state.selection,\r\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),\r\n                i = interpolate(selection0, selection1);\r\n\r\n            function tween(t) {\r\n              state.selection = t === 1 && selection1 === null ? null : i(t);\r\n              redraw.call(that);\r\n              emit.brush();\r\n            }\r\n\r\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\r\n          });\r\n    } else {\r\n      group\r\n          .each(function() {\r\n            var that = this,\r\n                args = arguments,\r\n                state = that.__brush,\r\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),\r\n                emit = emitter(that, args).beforestart();\r\n\r\n            interrupt(that);\r\n            state.selection = selection1 === null ? null : selection1;\r\n            redraw.call(that);\r\n            emit.start(event).brush(event).end(event);\r\n          });\r\n    }\r\n  };\r\n\r\n  brush.clear = function(group, event) {\r\n    brush.move(group, null, event);\r\n  };\r\n\r\n  function redraw() {\r\n    var group = select(this),\r\n        selection = local(this).selection;\r\n\r\n    if (selection) {\r\n      group.selectAll(".selection")\r\n          .style("display", null)\r\n          .attr("x", selection[0][0])\r\n          .attr("y", selection[0][1])\r\n          .attr("width", selection[1][0] - selection[0][0])\r\n          .attr("height", selection[1][1] - selection[0][1]);\r\n\r\n      group.selectAll(".handle")\r\n          .style("display", null)\r\n          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\r\n          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\r\n          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\r\n          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\r\n    }\r\n\r\n    else {\r\n      group.selectAll(".selection,.handle")\r\n          .style("display", "none")\r\n          .attr("x", null)\r\n          .attr("y", null)\r\n          .attr("width", null)\r\n          .attr("height", null);\r\n    }\r\n  }\r\n\r\n  function emitter(that, args, clean) {\r\n    var emit = that.__brush.emitter;\r\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\r\n  }\r\n\r\n  function Emitter(that, args, clean) {\r\n    this.that = that;\r\n    this.args = args;\r\n    this.state = that.__brush;\r\n    this.active = 0;\r\n    this.clean = clean;\r\n  }\r\n\r\n  Emitter.prototype = {\r\n    beforestart: function() {\r\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\r\n      return this;\r\n    },\r\n    start: function(event, mode) {\r\n      if (this.starting) this.starting = false, this.emit("start", event, mode);\r\n      else this.emit("brush", event);\r\n      return this;\r\n    },\r\n    brush: function(event, mode) {\r\n      this.emit("brush", event, mode);\r\n      return this;\r\n    },\r\n    end: function(event, mode) {\r\n      if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);\r\n      return this;\r\n    },\r\n    emit: function(type, event, mode) {\r\n      var d = select(this.that).datum();\r\n      listeners.call(\r\n        type,\r\n        this.that,\r\n        new BrushEvent(type, {\r\n          sourceEvent: event,\r\n          target: brush,\r\n          selection: dim.output(this.state.selection),\r\n          mode,\r\n          dispatch: listeners\r\n        }),\r\n        d\r\n      );\r\n    }\r\n  };\r\n\r\n  function started(event) {\r\n    if (touchending && !event.touches) return;\r\n    if (!filter.apply(this, arguments)) return;\r\n\r\n    var that = this,\r\n        type = event.target.__data__.type,\r\n        mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\r\n        signX = dim === Y ? null : signsX[type],\r\n        signY = dim === X ? null : signsY[type],\r\n        state = local(that),\r\n        extent = state.extent,\r\n        selection = state.selection,\r\n        W = extent[0][0], w0, w1,\r\n        N = extent[0][1], n0, n1,\r\n        E = extent[1][0], e0, e1,\r\n        S = extent[1][1], s0, s1,\r\n        dx = 0,\r\n        dy = 0,\r\n        moving,\r\n        shifting = signX && signY && keys && event.shiftKey,\r\n        lockX,\r\n        lockY,\r\n        points = Array.from(event.touches || [event], t => {\r\n          const i = t.identifier;\r\n          t = pointer(t, that);\r\n          t.point0 = t.slice();\r\n          t.identifier = i;\r\n          return t;\r\n        });\r\n\r\n    interrupt(that);\r\n    var emit = emitter(that, arguments, true).beforestart();\r\n\r\n    if (type === "overlay") {\r\n      if (selection) moving = true;\r\n      const pts = [points[0], points[1] || points[0]];\r\n      state.selection = selection = [[\r\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\r\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\r\n        ], [\r\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\r\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\r\n        ]];\r\n      if (points.length > 1) move(event);\r\n    } else {\r\n      w0 = selection[0][0];\r\n      n0 = selection[0][1];\r\n      e0 = selection[1][0];\r\n      s0 = selection[1][1];\r\n    }\r\n\r\n    w1 = w0;\r\n    n1 = n0;\r\n    e1 = e0;\r\n    s1 = s0;\r\n\r\n    var group = select(that)\r\n        .attr("pointer-events", "none");\r\n\r\n    var overlay = group.selectAll(".overlay")\r\n        .attr("cursor", cursors[type]);\r\n\r\n    if (event.touches) {\r\n      emit.moved = moved;\r\n      emit.ended = ended;\r\n    } else {\r\n      var view = select(event.view)\r\n          .on("mousemove.brush", moved, true)\r\n          .on("mouseup.brush", ended, true);\r\n      if (keys) view\r\n          .on("keydown.brush", keydowned, true)\r\n          .on("keyup.brush", keyupped, true)\r\n\r\n      dragDisable(event.view);\r\n    }\r\n\r\n    redraw.call(that);\r\n    emit.start(event, mode.name);\r\n\r\n    function moved(event) {\r\n      for (const p of event.changedTouches || [event]) {\r\n        for (const d of points)\r\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\r\n      }\r\n      if (shifting && !lockX && !lockY && points.length === 1) {\r\n        const point = points[0];\r\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\r\n          lockY = true;\r\n        else\r\n          lockX = true;\r\n      }\r\n      for (const point of points)\r\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\r\n      moving = true;\r\n      noevent(event);\r\n      move(event);\r\n    }\r\n\r\n    function move(event) {\r\n      const point = points[0], point0 = point.point0;\r\n      var t;\r\n\r\n      dx = point[0] - point0[0];\r\n      dy = point[1] - point0[1];\r\n\r\n      switch (mode) {\r\n        case MODE_SPACE:\r\n        case MODE_DRAG: {\r\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\r\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\r\n          break;\r\n        }\r\n        case MODE_HANDLE: {\r\n          if (points[1]) {\r\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\r\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\r\n          } else {\r\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\r\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\r\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\r\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\r\n          }\r\n          break;\r\n        }\r\n        case MODE_CENTER: {\r\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\r\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (e1 < w1) {\r\n        signX *= -1;\r\n        t = w0, w0 = e0, e0 = t;\r\n        t = w1, w1 = e1, e1 = t;\r\n        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);\r\n      }\r\n\r\n      if (s1 < n1) {\r\n        signY *= -1;\r\n        t = n0, n0 = s0, s0 = t;\r\n        t = n1, n1 = s1, s1 = t;\r\n        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);\r\n      }\r\n\r\n      if (state.selection) selection = state.selection; // May be set by brush.move!\r\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\r\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\r\n\r\n      if (selection[0][0] !== w1\r\n          || selection[0][1] !== n1\r\n          || selection[1][0] !== e1\r\n          || selection[1][1] !== s1) {\r\n        state.selection = [[w1, n1], [e1, s1]];\r\n        redraw.call(that);\r\n        emit.brush(event, mode.name);\r\n      }\r\n    }\r\n\r\n    function ended(event) {\r\n      nopropagation(event);\r\n      if (event.touches) {\r\n        if (event.touches.length) return;\r\n        if (touchending) clearTimeout(touchending);\r\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n      } else {\r\n        dragEnable(event.view, moving);\r\n        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);\r\n      }\r\n      group.attr("pointer-events", "all");\r\n      overlay.attr("cursor", cursors.overlay);\r\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\r\n      if (brush_empty(selection)) state.selection = null, redraw.call(that);\r\n      emit.end(event, mode.name);\r\n    }\r\n\r\n    function keydowned(event) {\r\n      switch (event.keyCode) {\r\n        case 16: { // SHIFT\r\n          shifting = signX && signY;\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_HANDLE) {\r\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n            mode = MODE_CENTER;\r\n            move(event);\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE; takes priority over ALT\r\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\r\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\r\n            mode = MODE_SPACE;\r\n            overlay.attr("cursor", cursors.selection);\r\n            move(event);\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent(event);\r\n    }\r\n\r\n    function keyupped(event) {\r\n      switch (event.keyCode) {\r\n        case 16: { // SHIFT\r\n          if (shifting) {\r\n            lockX = lockY = shifting = false;\r\n            move(event);\r\n          }\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n            mode = MODE_HANDLE;\r\n            move(event);\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE\r\n          if (mode === MODE_SPACE) {\r\n            if (event.altKey) {\r\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n              mode = MODE_CENTER;\r\n            } else {\r\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n              mode = MODE_HANDLE;\r\n            }\r\n            overlay.attr("cursor", cursors[type]);\r\n            move(event);\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent(event);\r\n    }\r\n  }\r\n\r\n  function touchmoved(event) {\r\n    emitter(this, arguments).moved(event);\r\n  }\r\n\r\n  function touchended(event) {\r\n    emitter(this, arguments).ended(event);\r\n  }\r\n\r\n  function initialize() {\r\n    var state = this.__brush || {selection: null};\r\n    state.extent = number2(extent.apply(this, arguments));\r\n    state.dim = dim;\r\n    return state;\r\n  }\r\n\r\n  brush.extent = function(_) {\r\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush) : extent;\r\n  };\r\n\r\n  brush.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;\r\n  };\r\n\r\n  brush.touchable = function(_) {\r\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), brush) : touchable;\r\n  };\r\n\r\n  brush.handleSize = function(_) {\r\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\r\n  };\r\n\r\n  brush.keyModifiers = function(_) {\r\n    return arguments.length ? (keys = !!_, brush) : keys;\r\n  };\r\n\r\n  brush.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? brush : value;\r\n  };\r\n\r\n  return brush;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-brush/src/index.js\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/cluster.js\nfunction defaultSeparation(a, b) {\r\n  return a.parent === b.parent ? 1 : 2;\r\n}\r\n\r\nfunction meanX(children) {\r\n  return children.reduce(meanXReduce, 0) / children.length;\r\n}\r\n\r\nfunction meanXReduce(x, c) {\r\n  return x + c.x;\r\n}\r\n\r\nfunction maxY(children) {\r\n  return 1 + children.reduce(maxYReduce, 0);\r\n}\r\n\r\nfunction maxYReduce(y, c) {\r\n  return Math.max(y, c.y);\r\n}\r\n\r\nfunction leafLeft(node) {\r\n  var children;\r\n  while (children = node.children) node = children[0];\r\n  return node;\r\n}\r\n\r\nfunction leafRight(node) {\r\n  var children;\r\n  while (children = node.children) node = children[children.length - 1];\r\n  return node;\r\n}\r\n\r\n/* harmony default export */ function cluster() {\r\n  var separation = defaultSeparation,\r\n      dx = 1,\r\n      dy = 1,\r\n      nodeSize = false;\r\n\r\n  function cluster(root) {\r\n    var previousNode,\r\n        x = 0;\r\n\r\n    // First walk, computing the initial x & y values.\r\n    root.eachAfter(function(node) {\r\n      var children = node.children;\r\n      if (children) {\r\n        node.x = meanX(children);\r\n        node.y = maxY(children);\r\n      } else {\r\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\r\n        node.y = 0;\r\n        previousNode = node;\r\n      }\r\n    });\r\n\r\n    var left = leafLeft(root),\r\n        right = leafRight(root),\r\n        x0 = left.x - separation(left, right) / 2,\r\n        x1 = right.x + separation(right, left) / 2;\r\n\r\n    // Second walk, normalizing x & y to the desired size.\r\n    return root.eachAfter(nodeSize ? function(node) {\r\n      node.x = (node.x - root.x) * dx;\r\n      node.y = (root.y - node.y) * dy;\r\n    } : function(node) {\r\n      node.x = (node.x - x0) / (x1 - x0) * dx;\r\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\r\n    });\r\n  }\r\n\r\n  cluster.separation = function(x) {\r\n    return arguments.length ? (separation = x, cluster) : separation;\r\n  };\r\n\r\n  cluster.size = function(x) {\r\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\r\n  };\r\n\r\n  cluster.nodeSize = function(x) {\r\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\r\n  };\r\n\r\n  return cluster;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/count.js\nfunction count(node) {\r\n  var sum = 0,\r\n      children = node.children,\r\n      i = children && children.length;\r\n  if (!i) sum = 1;\r\n  else while (--i >= 0) sum += children[i].value;\r\n  node.value = sum;\r\n}\r\n\r\n/* harmony default export */ function hierarchy_count() {\r\n  return this.eachAfter(count);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/each.js\n/* harmony default export */ function hierarchy_each(callback, that) {\r\n  let index = -1;\r\n  for (const node of this) {\r\n    callback.call(that, node, ++index, this);\r\n  }\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js\n/* harmony default export */ function eachBefore(callback, that) {\r\n  var node = this, nodes = [node], children, i, index = -1;\r\n  while (node = nodes.pop()) {\r\n    callback.call(that, node, ++index, this);\r\n    if (children = node.children) {\r\n      for (i = children.length - 1; i >= 0; --i) {\r\n        nodes.push(children[i]);\r\n      }\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js\n/* harmony default export */ function eachAfter(callback, that) {\r\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\r\n  while (node = nodes.pop()) {\r\n    next.push(node);\r\n    if (children = node.children) {\r\n      for (i = 0, n = children.length; i < n; ++i) {\r\n        nodes.push(children[i]);\r\n      }\r\n    }\r\n  }\r\n  while (node = next.pop()) {\r\n    callback.call(that, node, ++index, this);\r\n  }\r\n  return this;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/find.js\n/* harmony default export */ function hierarchy_find(callback, that) {\r\n  let index = -1;\r\n  for (const node of this) {\r\n    if (callback.call(that, node, ++index, this)) {\r\n      return node;\r\n    }\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sum.js\n/* harmony default export */ function sum(value) {\r\n  return this.eachAfter(function(node) {\r\n    var sum = +value(node.data) || 0,\r\n        children = node.children,\r\n        i = children && children.length;\r\n    while (--i >= 0) sum += children[i].value;\r\n    node.value = sum;\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sort.js\n/* harmony default export */ function hierarchy_sort(compare) {\r\n  return this.eachBefore(function(node) {\r\n    if (node.children) {\r\n      node.children.sort(compare);\r\n    }\r\n  });\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/path.js\n/* harmony default export */ function path(end) {\r\n  var start = this,\r\n      ancestor = leastCommonAncestor(start, end),\r\n      nodes = [start];\r\n  while (start !== ancestor) {\r\n    start = start.parent;\r\n    nodes.push(start);\r\n  }\r\n  var k = nodes.length;\r\n  while (end !== ancestor) {\r\n    nodes.splice(k, 0, end);\r\n    end = end.parent;\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction leastCommonAncestor(a, b) {\r\n  if (a === b) return a;\r\n  var aNodes = a.ancestors(),\r\n      bNodes = b.ancestors(),\r\n      c = null;\r\n  a = aNodes.pop();\r\n  b = bNodes.pop();\r\n  while (a === b) {\r\n    c = a;\r\n    a = aNodes.pop();\r\n    b = bNodes.pop();\r\n  }\r\n  return c;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/ancestors.js\n/* harmony default export */ function ancestors() {\r\n  var node = this, nodes = [node];\r\n  while (node = node.parent) {\r\n    nodes.push(node);\r\n  }\r\n  return nodes;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/descendants.js\n/* harmony default export */ function descendants() {\r\n  return Array.from(this);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/leaves.js\n/* harmony default export */ function leaves() {\r\n  var leaves = [];\r\n  this.eachBefore(function(node) {\r\n    if (!node.children) {\r\n      leaves.push(node);\r\n    }\r\n  });\r\n  return leaves;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/links.js\n/* harmony default export */ function links() {\r\n  var root = this, links = [];\r\n  root.each(function(node) {\r\n    if (node !== root) { // Don’t include the root’s parent, if any.\r\n      links.push({source: node.parent, target: node});\r\n    }\r\n  });\r\n  return links;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/iterator.js\n/* harmony default export */ function* hierarchy_iterator() {\r\n  var node = this, current, next = [node], children, i, n;\r\n  do {\r\n    current = next.reverse(), next = [];\r\n    while (node = current.pop()) {\r\n      yield node;\r\n      if (children = node.children) {\r\n        for (i = 0, n = children.length; i < n; ++i) {\r\n          next.push(children[i]);\r\n        }\r\n      }\r\n    }\r\n  } while (next.length);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction hierarchy(data, children) {\r\n  if (data instanceof Map) {\r\n    data = [undefined, data];\r\n    if (children === undefined) children = mapChildren;\r\n  } else if (children === undefined) {\r\n    children = objectChildren;\r\n  }\r\n\r\n  var root = new Node(data),\r\n      node,\r\n      nodes = [root],\r\n      child,\r\n      childs,\r\n      i,\r\n      n;\r\n\r\n  while (node = nodes.pop()) {\r\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\r\n      node.children = childs;\r\n      for (i = n - 1; i >= 0; --i) {\r\n        nodes.push(child = childs[i] = new Node(childs[i]));\r\n        child.parent = node;\r\n        child.depth = node.depth + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return root.eachBefore(computeHeight);\r\n}\r\n\r\nfunction node_copy() {\r\n  return hierarchy(this).eachBefore(copyData);\r\n}\r\n\r\nfunction objectChildren(d) {\r\n  return d.children;\r\n}\r\n\r\nfunction mapChildren(d) {\r\n  return Array.isArray(d) ? d[1] : null;\r\n}\r\n\r\nfunction copyData(node) {\r\n  if (node.data.value !== undefined) node.value = node.data.value;\r\n  node.data = node.data.data;\r\n}\r\n\r\nfunction computeHeight(node) {\r\n  var height = 0;\r\n  do node.height = height;\r\n  while ((node = node.parent) && (node.height < ++height));\r\n}\r\n\r\nfunction Node(data) {\r\n  this.data = data;\r\n  this.depth =\r\n  this.height = 0;\r\n  this.parent = null;\r\n}\r\n\r\nNode.prototype = hierarchy.prototype = {\r\n  constructor: Node,\r\n  count: hierarchy_count,\r\n  each: hierarchy_each,\r\n  eachAfter: eachAfter,\r\n  eachBefore: eachBefore,\r\n  find: hierarchy_find,\r\n  sum: sum,\r\n  sort: hierarchy_sort,\r\n  path: path,\r\n  ancestors: ancestors,\r\n  descendants: descendants,\r\n  leaves: leaves,\r\n  links: links,\r\n  copy: node_copy,\r\n  [Symbol.iterator]: hierarchy_iterator\r\n};\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/select.js\n\r\n\r\n/* harmony default export */ function src_select(selector) {\r\n  return typeof selector === "string"\r\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\r\n      : new Selection([[selector]], root);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/create.js\n\r\n\r\n\r\n/* harmony default export */ function src_create(name) {\r\n  return src_select(creator(name).call(document.documentElement));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectAll.js\n\r\n\r\n\r\n/* harmony default export */ function src_selectAll(selector) {\r\n  return typeof selector === "string"\r\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\r\n      : new Selection([array(selector)], root);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-selection/src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/linear.js\nfunction Linear(context) {\r\n  this._context = context;\r\n}\r\n\r\nLinear.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; // falls through\r\n      default: this._context.lineTo(x, y); break;\r\n    }\r\n  }\r\n};\r\n\r\n/* harmony default export */ function curve_linear(context) {\r\n  return new Linear(context);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/radial.js\n\r\n\r\nvar curveRadialLinear = curveRadial(curve_linear);\r\n\r\nfunction Radial(curve) {\r\n  this._curve = curve;\r\n}\r\n\r\nRadial.prototype = {\r\n  areaStart: function() {\r\n    this._curve.areaStart();\r\n  },\r\n  areaEnd: function() {\r\n    this._curve.areaEnd();\r\n  },\r\n  lineStart: function() {\r\n    this._curve.lineStart();\r\n  },\r\n  lineEnd: function() {\r\n    this._curve.lineEnd();\r\n  },\r\n  point: function(a, r) {\r\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\r\n  }\r\n};\r\n\r\nfunction curveRadial(curve) {\r\n\r\n  function radial(context) {\r\n    return new Radial(curve(context));\r\n  }\r\n\r\n  radial._curve = curve;\r\n\r\n  return radial;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-path/src/path.js\nconst pi = Math.PI,\r\n    tau = 2 * pi,\r\n    epsilon = 1e-6,\r\n    tauEpsilon = tau - epsilon;\r\n\r\nfunction Path() {\r\n  this._x0 = this._y0 = // start of current subpath\r\n  this._x1 = this._y1 = null; // end of current subpath\r\n  this._ = "";\r\n}\r\n\r\nfunction path_path() {\r\n  return new Path;\r\n}\r\n\r\nPath.prototype = path_path.prototype = {\r\n  constructor: Path,\r\n  moveTo: function(x, y) {\r\n    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);\r\n  },\r\n  closePath: function() {\r\n    if (this._x1 !== null) {\r\n      this._x1 = this._x0, this._y1 = this._y0;\r\n      this._ += "Z";\r\n    }\r\n  },\r\n  lineTo: function(x, y) {\r\n    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);\r\n  },\r\n  quadraticCurveTo: function(x1, y1, x, y) {\r\n    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);\r\n  },\r\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\r\n    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);\r\n  },\r\n  arcTo: function(x1, y1, x2, y2, r) {\r\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\r\n    var x0 = this._x1,\r\n        y0 = this._y1,\r\n        x21 = x2 - x1,\r\n        y21 = y2 - y1,\r\n        x01 = x0 - x1,\r\n        y01 = y0 - y1,\r\n        l01_2 = x01 * x01 + y01 * y01;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error("negative radius: " + r);\r\n\r\n    // Is this path empty? Move to (x1,y1).\r\n    if (this._x1 === null) {\r\n      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);\r\n    }\r\n\r\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\r\n    else if (!(l01_2 > epsilon));\r\n\r\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\r\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\r\n    // Or, is the radius zero? Line to (x1,y1).\r\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\r\n      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);\r\n    }\r\n\r\n    // Otherwise, draw an arc!\r\n    else {\r\n      var x20 = x2 - x0,\r\n          y20 = y2 - y0,\r\n          l21_2 = x21 * x21 + y21 * y21,\r\n          l20_2 = x20 * x20 + y20 * y20,\r\n          l21 = Math.sqrt(l21_2),\r\n          l01 = Math.sqrt(l01_2),\r\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\r\n          t01 = l / l01,\r\n          t21 = l / l21;\r\n\r\n      // If the start tangent is not coincident with (x0,y0), line to.\r\n      if (Math.abs(t01 - 1) > epsilon) {\r\n        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);\r\n      }\r\n\r\n      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);\r\n    }\r\n  },\r\n  arc: function(x, y, r, a0, a1, ccw) {\r\n    x = +x, y = +y, r = +r, ccw = !!ccw;\r\n    var dx = r * Math.cos(a0),\r\n        dy = r * Math.sin(a0),\r\n        x0 = x + dx,\r\n        y0 = y + dy,\r\n        cw = 1 ^ ccw,\r\n        da = ccw ? a0 - a1 : a1 - a0;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error("negative radius: " + r);\r\n\r\n    // Is this path empty? Move to (x0,y0).\r\n    if (this._x1 === null) {\r\n      this._ += "M" + x0 + "," + y0;\r\n    }\r\n\r\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\r\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\r\n      this._ += "L" + x0 + "," + y0;\r\n    }\r\n\r\n    // Is this arc empty? We’re done.\r\n    if (!r) return;\r\n\r\n    // Does the angle go the wrong way? Flip the direction.\r\n    if (da < 0) da = da % tau + tau;\r\n\r\n    // Is this a complete circle? Draw two arcs to complete the circle.\r\n    if (da > tauEpsilon) {\r\n      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);\r\n    }\r\n\r\n    // Is this arc non-empty? Draw an arc!\r\n    else if (da > epsilon) {\r\n      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));\r\n    }\r\n  },\r\n  rect: function(x, y, w, h) {\r\n    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";\r\n  },\r\n  toString: function() {\r\n    return this._;\r\n  }\r\n};\r\n\r\n/* harmony default export */ const src_path = (path_path);\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/array.js\nvar slice = Array.prototype.slice;\r\n\r\n/* harmony default export */ function src_array(x) {\r\n  return typeof x === "object" && "length" in x\r\n    ? x // Array, TypedArray, NodeList, array-like\r\n    : Array.from(x); // Map, Set, iterable, string, or anything else\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/constant.js\n/* harmony default export */ function d3_shape_src_constant(x) {\r\n  return function constant() {\r\n    return x;\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/point.js\nfunction point_x(p) {\r\n  return p[0];\r\n}\r\n\r\nfunction point_y(p) {\r\n  return p[1];\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/line.js\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ function line(x, y) {\r\n  var defined = d3_shape_src_constant(true),\r\n      context = null,\r\n      curve = curve_linear,\r\n      output = null;\r\n\r\n  x = typeof x === "function" ? x : (x === undefined) ? point_x : d3_shape_src_constant(x);\r\n  y = typeof y === "function" ? y : (y === undefined) ? point_y : d3_shape_src_constant(y);\r\n\r\n  function line(data) {\r\n    var i,\r\n        n = (data = src_array(data)).length,\r\n        d,\r\n        defined0 = false,\r\n        buffer;\r\n\r\n    if (context == null) output = curve(buffer = src_path());\r\n\r\n    for (i = 0; i <= n; ++i) {\r\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n        if (defined0 = !defined0) output.lineStart();\r\n        else output.lineEnd();\r\n      }\r\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\r\n    }\r\n\r\n    if (buffer) return output = null, buffer + "" || null;\r\n  }\r\n\r\n  line.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === "function" ? _ : d3_shape_src_constant(+_), line) : x;\r\n  };\r\n\r\n  line.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === "function" ? _ : d3_shape_src_constant(+_), line) : y;\r\n  };\r\n\r\n  line.defined = function(_) {\r\n    return arguments.length ? (defined = typeof _ === "function" ? _ : d3_shape_src_constant(!!_), line) : defined;\r\n  };\r\n\r\n  line.curve = function(_) {\r\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\r\n  };\r\n\r\n  line.context = function(_) {\r\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\r\n  };\r\n\r\n  return line;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/lineRadial.js\n\r\n\r\n\r\nfunction lineRadial(l) {\r\n  var c = l.curve;\r\n\r\n  l.angle = l.x, delete l.x;\r\n  l.radius = l.y, delete l.y;\r\n\r\n  l.curve = function(_) {\r\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\r\n  };\r\n\r\n  return l;\r\n}\r\n\r\n/* harmony default export */ function src_lineRadial() {\r\n  return lineRadial(line().curve(curveRadialLinear));\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basis.js\nfunction point(that, x, y) {\r\n  that._context.bezierCurveTo(\r\n    (2 * that._x0 + that._x1) / 3,\r\n    (2 * that._y0 + that._y1) / 3,\r\n    (that._x0 + 2 * that._x1) / 3,\r\n    (that._y0 + 2 * that._y1) / 3,\r\n    (that._x0 + 4 * that._x1 + x) / 6,\r\n    (that._y0 + 4 * that._y1 + y) / 6\r\n  );\r\n}\r\n\r\nfunction Basis(context) {\r\n  this._context = context;\r\n}\r\n\r\nBasis.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 =\r\n    this._y0 = this._y1 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 3: point(this, this._x1, this._y1); // falls through\r\n      case 2: this._context.lineTo(this._x1, this._y1); break;\r\n    }\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through\r\n      default: point(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = x;\r\n    this._y0 = this._y1, this._y1 = y;\r\n  }\r\n};\r\n\r\n/* harmony default export */ function curve_basis(context) {\r\n  return new Basis(context);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/bundle.js\n\r\n\r\nfunction Bundle(context, beta) {\r\n  this._basis = new Basis(context);\r\n  this._beta = beta;\r\n}\r\n\r\nBundle.prototype = {\r\n  lineStart: function() {\r\n    this._x = [];\r\n    this._y = [];\r\n    this._basis.lineStart();\r\n  },\r\n  lineEnd: function() {\r\n    var x = this._x,\r\n        y = this._y,\r\n        j = x.length - 1;\r\n\r\n    if (j > 0) {\r\n      var x0 = x[0],\r\n          y0 = y[0],\r\n          dx = x[j] - x0,\r\n          dy = y[j] - y0,\r\n          i = -1,\r\n          t;\r\n\r\n      while (++i <= j) {\r\n        t = i / j;\r\n        this._basis.point(\r\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\r\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\r\n        );\r\n      }\r\n    }\r\n\r\n    this._x = this._y = null;\r\n    this._basis.lineEnd();\r\n  },\r\n  point: function(x, y) {\r\n    this._x.push(+x);\r\n    this._y.push(+y);\r\n  }\r\n};\r\n\r\n/* harmony default export */ const bundle = ((function custom(beta) {\r\n\r\n  function bundle(context) {\r\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\r\n  }\r\n\r\n  bundle.beta = function(beta) {\r\n    return custom(+beta);\r\n  };\r\n\r\n  return bundle;\r\n})(0.85));\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-shape/src/index.js\n\r\n\r\n\r\n\r\n // Note: radialArea is deprecated!\r\n // Note: radialLine is deprecated!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/transform.js\nfunction transform_Transform(k, x, y) {\r\n  this.k = k;\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\n\r\ntransform_Transform.prototype = {\r\n  constructor: transform_Transform,\r\n  scale: function(k) {\r\n    return k === 1 ? this : new transform_Transform(this.k * k, this.x, this.y);\r\n  },\r\n  translate: function(x, y) {\r\n    return x === 0 & y === 0 ? this : new transform_Transform(this.k, this.x + this.k * x, this.y + this.k * y);\r\n  },\r\n  apply: function(point) {\r\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\r\n  },\r\n  applyX: function(x) {\r\n    return x * this.k + this.x;\r\n  },\r\n  applyY: function(y) {\r\n    return y * this.k + this.y;\r\n  },\r\n  invert: function(location) {\r\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\r\n  },\r\n  invertX: function(x) {\r\n    return (x - this.x) / this.k;\r\n  },\r\n  invertY: function(y) {\r\n    return (y - this.y) / this.k;\r\n  },\r\n  rescaleX: function(x) {\r\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\r\n  },\r\n  rescaleY: function(y) {\r\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\r\n  },\r\n  toString: function() {\r\n    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";\r\n  }\r\n};\r\n\r\nvar transform_identity = new transform_Transform(1, 0, 0);\r\n\r\ntransform.prototype = transform_Transform.prototype;\r\n\r\nfunction transform(node) {\r\n  while (!node.__zoom) if (!(node = node.parentNode)) return transform_identity;\r\n  return node.__zoom;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/zoom.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Ignore right-click, since that should open the context menu.\r\n// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event\r\nfunction zoom_defaultFilter(event) {\r\n  return (!event.ctrlKey || event.type === \'wheel\') && !event.button;\r\n}\r\n\r\nfunction zoom_defaultExtent() {\r\n  var e = this;\r\n  if (e instanceof SVGElement) {\r\n    e = e.ownerSVGElement || e;\r\n    if (e.hasAttribute("viewBox")) {\r\n      e = e.viewBox.baseVal;\r\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\r\n    }\r\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\r\n  }\r\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\r\n}\r\n\r\nfunction defaultTransform() {\r\n  return this.__zoom || identity;\r\n}\r\n\r\nfunction defaultWheelDelta(event) {\r\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\r\n}\r\n\r\nfunction zoom_defaultTouchable() {\r\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\r\n}\r\n\r\nfunction defaultConstrain(transform, extent, translateExtent) {\r\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\r\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\r\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\r\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\r\n  return transform.translate(\r\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\r\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\r\n  );\r\n}\r\n\r\n/* harmony default export */ function zoom() {\r\n  var filter = zoom_defaultFilter,\r\n      extent = zoom_defaultExtent,\r\n      constrain = defaultConstrain,\r\n      wheelDelta = defaultWheelDelta,\r\n      touchable = zoom_defaultTouchable,\r\n      scaleExtent = [0, Infinity],\r\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\r\n      duration = 250,\r\n      interpolate = interpolateZoom,\r\n      listeners = dispatch("start", "zoom", "end"),\r\n      touchstarting,\r\n      touchfirst,\r\n      touchending,\r\n      touchDelay = 500,\r\n      wheelDelay = 150,\r\n      clickDistance2 = 0,\r\n      tapDistance = 10;\r\n\r\n  function zoom(selection) {\r\n    selection\r\n        .property("__zoom", defaultTransform)\r\n        .on("wheel.zoom", wheeled, {passive: false})\r\n        .on("mousedown.zoom", mousedowned)\r\n        .on("dblclick.zoom", dblclicked)\r\n      .filter(touchable)\r\n        .on("touchstart.zoom", touchstarted)\r\n        .on("touchmove.zoom", touchmoved)\r\n        .on("touchend.zoom touchcancel.zoom", touchended)\r\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\r\n  }\r\n\r\n  zoom.transform = function(collection, transform, point, event) {\r\n    var selection = collection.selection ? collection.selection() : collection;\r\n    selection.property("__zoom", defaultTransform);\r\n    if (collection !== selection) {\r\n      schedule(collection, transform, point, event);\r\n    } else {\r\n      selection.interrupt().each(function() {\r\n        gesture(this, arguments)\r\n          .event(event)\r\n          .start()\r\n          .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)\r\n          .end();\r\n      });\r\n    }\r\n  };\r\n\r\n  zoom.scaleBy = function(selection, k, p, event) {\r\n    zoom.scaleTo(selection, function() {\r\n      var k0 = this.__zoom.k,\r\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\r\n      return k0 * k1;\r\n    }, p, event);\r\n  };\r\n\r\n  zoom.scaleTo = function(selection, k, p, event) {\r\n    zoom.transform(selection, function() {\r\n      var e = extent.apply(this, arguments),\r\n          t0 = this.__zoom,\r\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,\r\n          p1 = t0.invert(p0),\r\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\r\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\r\n    }, p, event);\r\n  };\r\n\r\n  zoom.translateBy = function(selection, x, y, event) {\r\n    zoom.transform(selection, function() {\r\n      return constrain(this.__zoom.translate(\r\n        typeof x === "function" ? x.apply(this, arguments) : x,\r\n        typeof y === "function" ? y.apply(this, arguments) : y\r\n      ), extent.apply(this, arguments), translateExtent);\r\n    }, null, event);\r\n  };\r\n\r\n  zoom.translateTo = function(selection, x, y, p, event) {\r\n    zoom.transform(selection, function() {\r\n      var e = extent.apply(this, arguments),\r\n          t = this.__zoom,\r\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;\r\n      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(\r\n        typeof x === "function" ? -x.apply(this, arguments) : -x,\r\n        typeof y === "function" ? -y.apply(this, arguments) : -y\r\n      ), e, translateExtent);\r\n    }, p, event);\r\n  };\r\n\r\n  function scale(transform, k) {\r\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\r\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\r\n  }\r\n\r\n  function translate(transform, p0, p1) {\r\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\r\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\r\n  }\r\n\r\n  function centroid(extent) {\r\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\r\n  }\r\n\r\n  function schedule(transition, transform, point, event) {\r\n    transition\r\n        .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })\r\n        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })\r\n        .tween("zoom", function() {\r\n          var that = this,\r\n              args = arguments,\r\n              g = gesture(that, args).event(event),\r\n              e = extent.apply(that, args),\r\n              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,\r\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\r\n              a = that.__zoom,\r\n              b = typeof transform === "function" ? transform.apply(that, args) : transform,\r\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\r\n          return function(t) {\r\n            if (t === 1) t = b; // Avoid rounding error on end.\r\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\r\n            g.zoom(null, t);\r\n          };\r\n        });\r\n  }\r\n\r\n  function gesture(that, args, clean) {\r\n    return (!clean && that.__zooming) || new Gesture(that, args);\r\n  }\r\n\r\n  function Gesture(that, args) {\r\n    this.that = that;\r\n    this.args = args;\r\n    this.active = 0;\r\n    this.sourceEvent = null;\r\n    this.extent = extent.apply(that, args);\r\n    this.taps = 0;\r\n  }\r\n\r\n  Gesture.prototype = {\r\n    event: function(event) {\r\n      if (event) this.sourceEvent = event;\r\n      return this;\r\n    },\r\n    start: function() {\r\n      if (++this.active === 1) {\r\n        this.that.__zooming = this;\r\n        this.emit("start");\r\n      }\r\n      return this;\r\n    },\r\n    zoom: function(key, transform) {\r\n      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);\r\n      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);\r\n      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);\r\n      this.that.__zoom = transform;\r\n      this.emit("zoom");\r\n      return this;\r\n    },\r\n    end: function() {\r\n      if (--this.active === 0) {\r\n        delete this.that.__zooming;\r\n        this.emit("end");\r\n      }\r\n      return this;\r\n    },\r\n    emit: function(type) {\r\n      var d = select(this.that).datum();\r\n      listeners.call(\r\n        type,\r\n        this.that,\r\n        new ZoomEvent(type, {\r\n          sourceEvent: this.sourceEvent,\r\n          target: zoom,\r\n          type,\r\n          transform: this.that.__zoom,\r\n          dispatch: listeners\r\n        }),\r\n        d\r\n      );\r\n    }\r\n  };\r\n\r\n  function wheeled(event, ...args) {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var g = gesture(this, args).event(event),\r\n        t = this.__zoom,\r\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\r\n        p = pointer(event);\r\n\r\n    // If the mouse is in the same location as before, reuse it.\r\n    // If there were recent wheel events, reset the wheel idle timeout.\r\n    if (g.wheel) {\r\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\r\n        g.mouse[1] = t.invert(g.mouse[0] = p);\r\n      }\r\n      clearTimeout(g.wheel);\r\n    }\r\n\r\n    // If this wheel event won’t trigger a transform change, ignore it.\r\n    else if (t.k === k) return;\r\n\r\n    // Otherwise, capture the mouse point and location at the start.\r\n    else {\r\n      g.mouse = [p, t.invert(p)];\r\n      interrupt(this);\r\n      g.start();\r\n    }\r\n\r\n    noevent(event);\r\n    g.wheel = setTimeout(wheelidled, wheelDelay);\r\n    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\r\n\r\n    function wheelidled() {\r\n      g.wheel = null;\r\n      g.end();\r\n    }\r\n  }\r\n\r\n  function mousedowned(event, ...args) {\r\n    if (touchending || !filter.apply(this, arguments)) return;\r\n    var currentTarget = event.currentTarget,\r\n        g = gesture(this, args, true).event(event),\r\n        v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),\r\n        p = pointer(event, currentTarget),\r\n        x0 = event.clientX,\r\n        y0 = event.clientY;\r\n\r\n    dragDisable(event.view);\r\n    nopropagation(event);\r\n    g.mouse = [p, this.__zoom.invert(p)];\r\n    interrupt(this);\r\n    g.start();\r\n\r\n    function mousemoved(event) {\r\n      noevent(event);\r\n      if (!g.moved) {\r\n        var dx = event.clientX - x0, dy = event.clientY - y0;\r\n        g.moved = dx * dx + dy * dy > clickDistance2;\r\n      }\r\n      g.event(event)\r\n       .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));\r\n    }\r\n\r\n    function mouseupped(event) {\r\n      v.on("mousemove.zoom mouseup.zoom", null);\r\n      dragEnable(event.view, g.moved);\r\n      noevent(event);\r\n      g.event(event).end();\r\n    }\r\n  }\r\n\r\n  function dblclicked(event, ...args) {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var t0 = this.__zoom,\r\n        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),\r\n        p1 = t0.invert(p0),\r\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\r\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);\r\n\r\n    noevent(event);\r\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);\r\n    else select(this).call(zoom.transform, t1, p0, event);\r\n  }\r\n\r\n  function touchstarted(event, ...args) {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var touches = event.touches,\r\n        n = touches.length,\r\n        g = gesture(this, args, event.changedTouches.length === n).event(event),\r\n        started, i, t, p;\r\n\r\n    nopropagation(event);\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i], p = pointer(t, this);\r\n      p = [p, this.__zoom.invert(p), t.identifier];\r\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\r\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\r\n    }\r\n\r\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\r\n\r\n    if (started) {\r\n      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\r\n      interrupt(this);\r\n      g.start();\r\n    }\r\n  }\r\n\r\n  function touchmoved(event, ...args) {\r\n    if (!this.__zooming) return;\r\n    var g = gesture(this, args).event(event),\r\n        touches = event.changedTouches,\r\n        n = touches.length, i, t, p, l;\r\n\r\n    noevent(event);\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i], p = pointer(t, this);\r\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\r\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\r\n    }\r\n    t = g.that.__zoom;\r\n    if (g.touch1) {\r\n      var p0 = g.touch0[0], l0 = g.touch0[1],\r\n          p1 = g.touch1[0], l1 = g.touch1[1],\r\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\r\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\r\n      t = scale(t, Math.sqrt(dp / dl));\r\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\r\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\r\n    }\r\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\r\n    else return;\r\n\r\n    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));\r\n  }\r\n\r\n  function touchended(event, ...args) {\r\n    if (!this.__zooming) return;\r\n    var g = gesture(this, args).event(event),\r\n        touches = event.changedTouches,\r\n        n = touches.length, i, t;\r\n\r\n    nopropagation(event);\r\n    if (touchending) clearTimeout(touchending);\r\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i];\r\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\r\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\r\n    }\r\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\r\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\r\n    else {\r\n      g.end();\r\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\r\n      if (g.taps === 2) {\r\n        t = pointer(t, this);\r\n        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {\r\n          var p = select(this).on("dblclick.zoom");\r\n          if (p) p.apply(this, arguments);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  zoom.wheelDelta = function(_) {\r\n    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;\r\n  };\r\n\r\n  zoom.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;\r\n  };\r\n\r\n  zoom.touchable = function(_) {\r\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;\r\n  };\r\n\r\n  zoom.extent = function(_) {\r\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\r\n  };\r\n\r\n  zoom.scaleExtent = function(_) {\r\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\r\n  };\r\n\r\n  zoom.translateExtent = function(_) {\r\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\r\n  };\r\n\r\n  zoom.constrain = function(_) {\r\n    return arguments.length ? (constrain = _, zoom) : constrain;\r\n  };\r\n\r\n  zoom.duration = function(_) {\r\n    return arguments.length ? (duration = +_, zoom) : duration;\r\n  };\r\n\r\n  zoom.interpolate = function(_) {\r\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\r\n  };\r\n\r\n  zoom.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? zoom : value;\r\n  };\r\n\r\n  zoom.clickDistance = function(_) {\r\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\r\n  };\r\n\r\n  zoom.tapDistance = function(_) {\r\n    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;\r\n  };\r\n\r\n  return zoom;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/d3-zoom/src/index.js\n\r\n\r\n\n;// CONCATENATED MODULE: ./node_modules/d3/src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\nasync function main() {\r\n    var visualisationType = "both";\r\n    const visualisationTypeElement = document.querySelector(\'#visualisationType\');\r\n    if (visualisationTypeElement != null) {\r\n        visualisationTypeElement.addEventListener(\'change\', onChange);\r\n        function onChange(e) {\r\n            visualisationType = e.target.value;\r\n        }\r\n    }\r\n    var animationType = true;\r\n    const animationTypeElement = document.querySelector(\'#animationType\');\r\n    if (animationTypeElement != null) {\r\n        animationTypeElement.addEventListener(\'change\', onChange);\r\n        function onChange(e) {\r\n            animationType = e.target.checked;\r\n        }\r\n    }\r\n    var onlyIncludeCategoriesWithLinks = true;\r\n    const onlyIncludeCategoriesWithLinksElement = document.querySelector(\'#onlyIncludeCategoriesWithLinks\');\r\n    if (onlyIncludeCategoriesWithLinksElement != null) {\r\n        onlyIncludeCategoriesWithLinksElement.addEventListener(\'change\', onChange);\r\n        function onChange(e) {\r\n            onlyIncludeCategoriesWithLinks = e.target.checked;\r\n            drawChart();\r\n        }\r\n    }\r\n    var excludeContact = true;\r\n    const excludeContactElement = document.querySelector(\'#excludeContact\');\r\n    if (excludeContactElement != null) {\r\n        excludeContactElement.addEventListener(\'change\', onChange);\r\n        function onChange(e) {\r\n            excludeContact = e.target.checked;\r\n            drawChart();\r\n        }\r\n    }\r\n    let colorNone = "#ccc";\r\n    let colorDisabling = "#f00";\r\n    let colorEnabling = "#00f";\r\n    let width = 1200;\r\n    function bilink(root) {\r\n        const map = new Map(root.leaves().map(d => [id(d), d]));\r\n        for (const d of root.leaves().filter((d) => d.data.groupHeader != true)) {\r\n            if (d.data.groupHeader != true) {\r\n                d.data.outgoing = [], d.data.incoming = d.data.links;\r\n                d.data.incoming.forEach(i => {\r\n                    i.from = map.get(i.name);\r\n                    i.to = d;\r\n                });\r\n            }\r\n        }\r\n        for (const d of root.leaves().filter((d) => d.data.groupHeader != true)) {\r\n            if (d.data.groupHeader != true) {\r\n                for (const o of d.data.incoming) {\r\n                    o.from.data.outgoing.push(o);\r\n                }\r\n            }\r\n        }\r\n        return root;\r\n    }\r\n    let line = src_lineRadial()\r\n        .curve(bundle.beta(0.65))\r\n        .radius((d) => d.y)\r\n        .angle((d) => d.x);\r\n    function id(node) {\r\n        return `${node.parent ? id(node.parent) + "." : ""}${node.data.name}`;\r\n    }\r\n    function chart(data) {\r\n        let radius = width / (onlyIncludeCategoriesWithLinks ? 3.5 : 2.9);\r\n        let tree = cluster()\r\n            .size([2 * Math.PI, radius]);\r\n        if (excludeContact) {\r\n            const hierarchyData = hierarchy(data);\r\n            const bilinkedHierarchyData = bilink(hierarchyData);\r\n            //   for (let i = bilinkedHierarchyData.leaves().length - 1; i >= 0; i--) {\r\n            const allCategories = bilinkedHierarchyData.children;\r\n            for (let i = allCategories.length - 1; i >= 0; i--) {\r\n                const category = allCategories[i];\r\n                for (let j = category.children.length - 1; j >= 0; j--) {\r\n                    const choice = category.children[j];\r\n                    const isContactAndNotLinked = choice.data.name == "bitte um Unterstützung"\r\n                        && choice.data.incoming.length == 0\r\n                        && choice.data.outgoing.length == 0;\r\n                    if (isContactAndNotLinked) {\r\n                        data.children[i].children.splice(j, 1);\r\n                    }\r\n                }\r\n            }\r\n            //  }\r\n        }\r\n        if (onlyIncludeCategoriesWithLinks) {\r\n            const hierarchyData = hierarchy(data);\r\n            const bilinkedHierarchyData = bilink(hierarchyData);\r\n            const allCategories = bilinkedHierarchyData.children;\r\n            for (let i = allCategories.length - 1; i >= 0; i--) {\r\n                const category = allCategories[i];\r\n                const noChoiceInCategoryIsLinked = !category.children.filter((d) => d.data.groupHeader != true).some((choice) => choice.data.incoming.length > 0 || choice.data.outgoing.length > 0);\r\n                if (noChoiceInCategoryIsLinked) {\r\n                    data.children.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        {\r\n            /*\r\n                    const countOfGroupsAndChildren = data.children.length\r\n                        + data.children.flatMap((group) => group.children).length;\r\n            \r\n                    const halfTheCountOfGroups = countOfGroupsAndChildren / 2;\r\n            */\r\n            for (let i = 0, j = 0; i < data.children.length; i++, j++) {\r\n                const group = data.children[i];\r\n                group.children.unshift({ name: group.listName.replace("Choice", "").replace(RegExp("([A-Z])", \'g\'), (a) => ` ${a}`), groupHeader: true });\r\n                //  j += group.children.length;\r\n            }\r\n        }\r\n        {\r\n            const hierarchyData = hierarchy(data);\r\n            const geometryHierarchyData = tree(hierarchyData);\r\n            const allCategories = geometryHierarchyData.children;\r\n            for (let i = allCategories.length - 1; i >= 0; i--) {\r\n                const category = allCategories[i];\r\n                if (category.children[0].x > Math.PI) {\r\n                    data.children[i].children.reverse();\r\n                }\r\n            }\r\n        }\r\n        const hierarchyData = hierarchy(data);\r\n        const bilinkedHierarchyData = bilink(hierarchyData);\r\n        const root = tree(bilinkedHierarchyData);\r\n        const svg = src_create("svg")\r\n            .attr("viewBox", [-width / 2, -width / 2, width, width]);\r\n        const groupHeaderNodes = svg.append("g")\r\n            .attr("font-family", "sans-serif")\r\n            .attr("font-size", (d) => onlyIncludeCategoriesWithLinks ? 12 : 7)\r\n            .selectAll("g")\r\n            .data(root.leaves().filter((d) => d.data.groupHeader == true))\r\n            .join("g")\r\n            .attr("transform", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`)\r\n            .append("text")\r\n            .attr("dy", "0.31em")\r\n            .attr("x", d => d.x < Math.PI ? 6 : -6)\r\n            .attr("text-anchor", d => d.x < Math.PI ? "start" : "end")\r\n            .attr("font-weight", "900")\r\n            .attr("transform", d => d.x >= Math.PI ? "rotate(180)" : null)\r\n            .text((d) => d.data.name.length > 50 ? `${d.data.name.substring(0, 50)} ...` : d.data.name);\r\n        const node = svg.append("g")\r\n            .attr("font-family", "sans-serif")\r\n            .attr("font-size", (d) => onlyIncludeCategoriesWithLinks ? 10 : 8)\r\n            .selectAll("g")\r\n            .data(root.leaves().filter((d) => d.data.groupHeader != true))\r\n            .join("g")\r\n            .attr("transform", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`)\r\n            .append("text")\r\n            .attr("dy", "0.31em")\r\n            .attr("x", d => d.x < Math.PI ? 6 : -6)\r\n            .attr("text-anchor", d => d.x < Math.PI ? "start" : "end")\r\n            .attr("transform", d => d.x >= Math.PI ? "rotate(180)" : null)\r\n            .text((d) => d.data.name.length > 45 ? `${d.data.name.substring(0, 45)} ...` : d.data.name)\r\n            .each(function (d) { d.data.text = this; })\r\n            .on("mouseover", overed)\r\n            .on("mouseout", outed)\r\n            .call(text => text.append("title").text((d) => `${id(d)}\r\n  ${d.data.outgoing?.length} outgoing\r\n  ${d.data.incoming?.length} incoming`));\r\n        const link = svg.append("g")\r\n            .attr("stroke", colorNone)\r\n            .attr("fill", "none")\r\n            .selectAll("path")\r\n            .data(root.leaves().filter((d) => d.data.groupHeader != true).flatMap((leaf) => leaf.data.outgoing))\r\n            .join("path")\r\n            .style("mix-blend-mode", "multiply")\r\n            .attr("d", d => line(d.from.path(d.to)))\r\n            .each(function (d) { d.path = this; d.linkString = line(d.from.path(d.to)); });\r\n        const animationLinks = svg.append("g")\r\n            .selectAll("g")\r\n            .data(root.leaves().filter((d) => d.data.groupHeader != true).flatMap((leaf) => leaf.data.outgoing))\r\n            .join("g")\r\n            .each(function (d) { d.animation = this; });\r\n        const arrows = svg.append("g")\r\n            .selectAll("g")\r\n            .data(root.leaves().filter((d) => d.data.groupHeader != true))\r\n            .join("g")\r\n            .each(function (d) { d.data.arrow = this; });\r\n        function overed(event, overedDatum) {\r\n            link.style("mix-blend-mode", null);\r\n            src_select(this).attr("font-weight", "bold");\r\n            if (visualisationType == "backward" || visualisationType == "both") {\r\n                src_selectAll(overedDatum.data.incoming.map((d) => d.path))\r\n                    .attr("stroke", (d) => d.link === "enabling" ? colorEnabling : colorDisabling).raise();\r\n                src_selectAll(overedDatum.data.incoming.map((d) => d.from.data.text))\r\n                    .attr("fill", (d) => d.data.outgoing.find((l) => l.to == overedDatum)?.link === "enabling" ? colorEnabling : colorDisabling)\r\n                    .attr("font-weight", "bold");\r\n                src_selectAll(overedDatum.data.incoming.map((d) => d.from.data.arrow))\r\n                    .attr("transform", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y + 5},0)`)\r\n                    .append("polygon")\r\n                    .attr("points", "0,-4 6,0 0,4 3,0")\r\n                    .attr("fill", (d) => d.data.outgoing.find((l) => l.to == overedDatum)?.link === "enabling" ? colorEnabling : colorDisabling)\r\n                    .attr("text-anchor", d => d.x < Math.PI ? "start" : "end")\r\n                    .attr("transform", d => "rotate(180)");\r\n                if (animationType) {\r\n                    const pointCount = 8;\r\n                    const duration = 60;\r\n                    for (let index = 0; index < pointCount; index++) {\r\n                        src_selectAll(overedDatum.data.incoming.map((d) => d.animation))\r\n                            .append("circle")\r\n                            .attr("r", 2)\r\n                            .attr("fill", function (d) {\r\n                            return d.link === "enabling" ? colorEnabling : colorDisabling;\r\n                        })\r\n                            .append("animateMotion")\r\n                            .attr("dur", duration + "s")\r\n                            .attr("keyPoints", (1 - (index / pointCount)) + ";1;0;" + (1 - (index / pointCount)))\r\n                            .attr("keyTimes", "0;" + ((index / pointCount)) + ";" + ((index / pointCount)) + ";1")\r\n                            .attr("calcMode", "linear")\r\n                            .attr("repeatCount", "indefinite")\r\n                            .attr("path", (d) => d.linkString);\r\n                    }\r\n                }\r\n            }\r\n            if (visualisationType == "forward" || visualisationType == "both") {\r\n                src_selectAll(overedDatum.data.outgoing.map((d) => d.path))\r\n                    .attr("stroke", (d) => d.link === "enabling" ? colorEnabling : colorDisabling).raise();\r\n                src_selectAll(overedDatum.data.outgoing.map((d) => d.to.data.text))\r\n                    .attr("fill", (d) => d.data.incoming.find((l) => l.from == overedDatum)?.link === "enabling" ? colorEnabling : colorDisabling)\r\n                    .attr("font-weight", "bold");\r\n                src_selectAll(overedDatum.data.outgoing.map((d) => d.to.data.arrow))\r\n                    .attr("transform", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y - 3},0)`)\r\n                    .append("polygon")\r\n                    .attr("points", "0,-4 6,0 0,4 3,0")\r\n                    .attr("fill", (d) => d.data.incoming.find((l) => l.from == overedDatum)?.link === "enabling" ? colorEnabling : colorDisabling)\r\n                    .attr("text-anchor", d => d.x < Math.PI ? "start" : "end");\r\n                if (animationType) {\r\n                    const pointCount = 8;\r\n                    const duration = 60;\r\n                    for (let index = 0; index < pointCount; index++) {\r\n                        src_selectAll(overedDatum.data.outgoing.map((d) => d.animation))\r\n                            .append("circle")\r\n                            .attr("r", 2)\r\n                            .attr("fill", (d) => d.link === "enabling" ? colorEnabling : colorDisabling)\r\n                            .append("animateMotion")\r\n                            .attr("dur", duration + "s")\r\n                            .attr("keyPoints", ((index / pointCount)) + ";1;0;" + ((index / pointCount)))\r\n                            .attr("keyTimes", "0;" + (1 - (index / pointCount)) + ";" + (1 - (index / pointCount)) + ";1")\r\n                            .attr("calcMode", "linear")\r\n                            .attr("repeatCount", "indefinite")\r\n                            .attr("path", (d) => d.linkString);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        function outed(event, d) {\r\n            link.style("mix-blend-mode", "multiply");\r\n            src_select(this).attr("font-weight", null);\r\n            if (visualisationType == "backward" || visualisationType == "both") {\r\n                src_selectAll(d.data.incoming.map((d) => d.path)).attr("stroke", null);\r\n                src_selectAll(d.data.incoming.map((d) => d.from.data.text)).attr("fill", null).attr("font-weight", null);\r\n                src_selectAll(d.data.incoming.map((d) => d.from.data.arrow))\r\n                    .selectAll("polygon")\r\n                    .remove();\r\n                if (animationType) {\r\n                    src_selectAll(d.data.incoming.map((d) => d.animation))\r\n                        .selectAll("circle")\r\n                        .remove();\r\n                }\r\n            }\r\n            if (visualisationType == "forward" || visualisationType == "both") {\r\n                src_selectAll(d.data.outgoing.map((d) => d.path)).attr("stroke", null);\r\n                src_selectAll(d.data.outgoing.map((d) => d.to.data.text)).attr("fill", null).attr("font-weight", null);\r\n                src_selectAll(d.data.outgoing.map((d) => d.to.data.arrow))\r\n                    .selectAll("polygon")\r\n                    .remove();\r\n                if (animationType) {\r\n                    src_selectAll(d.data.outgoing.map((d) => d.animation))\r\n                        .selectAll("circle")\r\n                        .remove();\r\n                }\r\n            }\r\n        }\r\n        return svg.node();\r\n    }\r\n    async function drawChart() {\r\n        const data = await (await fetch("./data.json")).json();\r\n        src_select("body").select("svg").remove();\r\n        src_select("body").append(() => chart(data));\r\n    }\r\n    drawChart();\r\n}\r\nmain();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///727\n')}},__webpack_exports__={};__webpack_modules__[727]()})();